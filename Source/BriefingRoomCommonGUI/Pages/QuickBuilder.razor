@page "/QuickBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using System.Text
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.IO
<div class="title-bar">
    <h1>Quick Mission Generator</h1>
    <div class="template-box">
        <p>Template</p>
        <div class="btn-group" role="group">
            <div class="btn btn-primary hidden-input-file">
                <InputFile i OnChange="@LoadTemplate" />
                <span class="oi oi-data-transfer-upload"></span>
            </div>
            <button class="btn btn-secondary" aria-hidden="true" @onclick="() => SaveTemplate()">
                <span class="oi oi-data-transfer-download"></span>
            </button>
            <button class="btn btn-warning" aria-hidden="true" @onclick="() => ClearTemplate()">
                <span class="oi oi-reload"></span>
            </button>
        </div>
    </div>
</div>
<div class="generator-group">
    <div class="generator-form">
        <div>
            @if(!string.IsNullOrEmpty(tempateMessage)){
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
                }
            @if(!string.IsNullOrEmpty(errorMessage)){
            <div class="alert alert-danger" role="alert">
                Error: @errorMessage
            </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMission">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <button class="btn btn-primary form-control" type="submit">Generate</button>
            <hr/>
            <div id="context" class="generator-block">
                <h3>Context</h3>
                <div class="generator-group flex-justify-spaced">
                    <div class="form-group flex-block">
                        <label>Blue coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionBlue" 
                        EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="10">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="form-group flex-block">
                        <label>Red coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionRed" 
                        EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="10">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="form-group flex-block">
                        <label>Time period</label>
                        <InputSelect class="form-control min-width" @bind-Value="Template.ContextDecade">
                            @foreach (var value in Enum.GetValues(typeof(Decade)))
                            {
                                <option value="@value">@BriefingRoomGUITools.GetEnumName(value)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group flex-block">
                        <label>Player coalition</label>
                        <InputSelect class="form-control min-width" @bind-Value="Template.ContextPlayerCoalition">
                            @foreach (var value in Enum.GetValues(typeof(Coalition)))
                            {
                                <option value="@value">@BriefingRoomGUITools.GetEnumName(value)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group flex-block">
                        <label>Theater</label>
                        <InputSelect class="form-control min-width" @bind-Value="Template.ContextTheater">
                            @foreach (var value in
                            BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.Theater))
                            {
                                <option value="@value.ID">@value.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <hr/>
            </div>
            <div id="objectives" class="generator-block">
                <h3>Objectives</h3>
                @foreach (var objective in Template.Objectives)
                {
                    <div class="generator-group flex-justify-spaced">
                            <div class="form-group flex-block">
                                <label>Objective</label>
                                <InputSelect class="form-control" @bind-Value="objective.Preset">
                                    @foreach (var value in
                                    BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.ObjectivePreset))
                                    {
                                        <option value="@value.ID">@value.GetNameAndDescription(": ", true)</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group flex-block">
                                <label>Target count</label>
                                <InputSelect class="form-control" @bind-Value="objective.TargetCount">
                                    @foreach (var value in Enum.GetValues(typeof(Amount)))
                                    {
                                        <option value="@value">@BriefingRoomGUITools.GetEnumName(value)</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group flex-box">
                                <button type="button" class="btn btn-secondary row-button" @onclick="() => CloneObjective(objective)">Duplicate</button>
                                <button type="button" class="btn btn-secondary row-button" @onclick="() => RemoveObjective(objective)">Delete</button>
                            </div>
                        </div>
                }
                <button type="button" class="btn btn-secondary" @onclick="AddObjective">+</button>
                <hr/>
            </div>
            <div id="flight-groups" class="generator-block">
                <h3>Player flight groups</h3>

                @foreach (var flight in Template.PlayerFlightGroups)
                {
                    <div class="generator-group flex-justify-spaced">
                        <div class="form-group flex-block">
                            <label>Aircraft</label>
                            <BlazoredTypeahead SearchMethod="SearchAircraft" @bind-Value="flight.Aircraft"
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                                MaximumSuggestions="100">
                                <SelectedTemplate Context="aircraftId">
                                    @GetAircraftDisplayName(@aircraftId)
                                </SelectedTemplate>
                                <ResultTemplate Context="aircraft">
                                    @aircraft.Name
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <div class="form-group flex-block">
                            <label>Count</label>
                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                        </div>
                        <div class="form-group flex-block">
                            <label>Carrier</label>
                            <InputSelect class="form-control" @bind-Value="flight.Carrier">
                                <option value="">N/A</option>
                                @foreach (var value in
                                BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.UnitCarrier))
                                {
                                    <option value="@value.ID">@value.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group flex-block">
                            <label class="checkboxList-item row-checkbox">
                                <input type="checkbox" checked=@flight.AIWingmen
                                    @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                <span>AI Wingmen</span>
                            </label>
                        </div>
                        <div class="form-group flex-box">
                            @* <button type="button" class="btn btn-secondary row-button" @onclick="() => CloneFlight(objective)">Duplicate</button> *@
                            <button type="button" class="btn btn-secondary row-button" @onclick="() => RemoveFlightGroup(flight)">Delete</button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-secondary" @onclick="AddFlightGroup">+</button>
                <hr/>
            </div>
            <div id="mission-features" class="generator-block">
                <h3>Mission features</h3>
                <CheckBoxList
                    Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                    TextField="@((item)=>item.Name + "|" + item.Description)" ValueField="@((item)=>item.ID)"
                    SelectedValues="Template.MissionFeatures" TItem="DatabaseEntryInfo" TItemOutput="string">
                </CheckBoxList>
            </div>
        </EditForm>
    </div>
    @if (mission != null)
    {
        <div class="generator-preview">
            <button class="btn btn-primary form-control" @onclick="DownloadMission">Export mission</button>
            <button class="btn btn-primary form-control" @onclick="DownloadBriefing">Export briefing</button>
            <div>@((MarkupString)mission.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {

    private BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom();
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string tempateMessage;

    private string templatePath;

    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
    protected override void OnInitialized()
    {
        Template = new MissionTemplate();
        flightGroupTab = Template.PlayerFlightGroups[0];
        ObjectiveTab = Template.Objectives[0];
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t=> clearTemplateMessage());
    }

    private void clearTemplateMessage()
    {
     tempateMessage = "";
     StateHasChanged();
    }

    private async void LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());
            var data = await reader.ReadToEndAsync();
            Template.LoadFromString(data); 
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        tempateMessage = "Template Saved"; 
        clearTemplateMessageDelay();
    }

    private void ClearTemplate()
    {
        tempateMessage = "Template Reset"; 
        Template.Clear();
        clearTemplateMessageDelay();
    }

    private void GenerateMission()
    {
        try {
            mission = null;
            errorMessage = "";
            mission = briefingRoom.GenerateMission(Template, true);
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    async Task DownloadMission()
    {
        byte[] zipBytes = mission.SaveToMizBytes();
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes); }
        catch (Exception) { }
    }

    async Task DownloadBriefing()
    {
        byte[] zipBytes = Encoding.ASCII.GetBytes(mission.Briefing.GetBriefingAsHTML());
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html", "text/html", zipBytes); }
        catch (Exception) { }
    }

    private MissionTemplateFlightGroup flightGroupTab;
    private void SetFlightGroupTab(MissionTemplateFlightGroup var)
    {
        flightGroupTab = var;
    }

    private void AddFlightGroup()
    {
        MissionTemplateFlightGroup flight = new();
        flightGroupTab = flight;
        Template.PlayerFlightGroups.Add(flight);
    }

    private void RemoveFlightGroup(MissionTemplateFlightGroup flight)
    {
        Template.PlayerFlightGroups.Remove(flight);
        if (Template.PlayerFlightGroups.Count == 1)
        {
            flightGroupTab = Template.PlayerFlightGroups[0];
        }
    }

    private MissionTemplateObjective ObjectiveTab;
    private void SetObjectiveTab(MissionTemplateObjective var)
    {
        ObjectiveTab = var;
    }

    private void AddObjective()
    {
        MissionTemplateObjective obj = new();
        ObjectiveTab = obj;
        Template.Objectives.Add(obj);
    }

    private void CloneObjective(MissionTemplateObjective obj) {
        MissionTemplateObjective newObj = new(){
            Target = obj.Target,
            TargetBehavior = obj.TargetBehavior,
            TargetCount = obj.TargetCount,
            Task = obj.Task,
            Options = obj.Options,
            Features = obj.Features
        };
        ObjectiveTab = newObj;
        Template.Objectives.Add(newObj);
    }

    private void RemoveObjective(MissionTemplateObjective obj)
    {
        Template.Objectives.Remove(obj);
    }

    private async Task<IEnumerable<Country>> SearchCountry(string searchText) =>
    await Typeahead.SearchEnum<Country>(searchText);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchAircraft(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.UnitFlyableAircraft, searchText);
    private string GetAircraftDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.UnitFlyableAircraft, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchObjectiveType(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.ObjectiveTask, searchText);
    private string GetObjectiveTypeDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTask, id);

    private string GetObjectiveTargetDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTarget, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchCoalition(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.Coalition, searchText);

    private string GetCoalitionDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.Coalition, id);
}