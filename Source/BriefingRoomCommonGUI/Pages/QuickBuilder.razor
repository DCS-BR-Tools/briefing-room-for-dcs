@page "/QuickBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using System.Text
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.IO
<div class="title-bar">
    <h1>Quick Mission Generator </h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".brt" />
</div>
<div class="generator-group">
    <div class="generator-form">
        <div>
            @if (!string.IsNullOrEmpty(tempateMessage))
            {
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    Error: @errorMessage
                </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMission">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <button class="btn btn-primary form-control" type="submit">Generate</button>
            <p class="custom-warning">The quick builder can load templates created in the Full Builder to make use of the full range of options. info icons (<span class="oi oi-info"></span>) will show info on where these apply. The quick builder is purposely minimialist on options.</p>
            <hr />
            <div id="context" class="generator-block">
                <h3>Context</h3>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <div class="form-group flex-block">
                        <label>Blue coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionBlue"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="form-group flex-block">
                        <label>Red coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionRed"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <InputEnum ClassString="flex-block" Label="Time period" @bind-Value="Template.ContextDecade"
                        EnumType="Decade" />
                </div>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <InputEnum ClassString="flex-block" Label="Player Side"
                        @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition" />
                    <InputDataBase ClassString="flex-block" Label="Theater" @bind-Value="Template.ContextTheater"
                        DataBaseType="DatabaseEntryType.Theater" />
                    <InputDataBase ClassString="flex-block" Label="Situation" @bind-Value="Template.ContextSituation"
                        Grouping="@Template.ContextTheater" DataBaseType="DatabaseEntryType.Situation"
                        EmptOpt="Random" />
                </div>
                <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;Season:@Template.EnvironmentSeason&nbsp;,Time of day:@Template.EnvironmentTimeOfDay&nbsp;,Weather:@Template.EnvironmentWeatherPreset&nbsp;,Wind:@Template.EnvironmentWind&nbsp;</p>  
                <hr />
            </div>
            <div id="flight-groups" class="generator-block">
                <h3>Player flight groups</h3>

                @foreach (var flight in Template.PlayerFlightGroups)
                {
                    <div class="generator-group flex-justify-spaced flex-margin-fix @(flight.Hostile ? "hostile" : "")">
                        <div class="form-group flex-block">
                            <label>Aircraft</label>
                            <BlazoredTypeahead SearchMethod="SearchAircraft" @bind-Value="flight.Aircraft"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                                <SelectedTemplate Context="aircraftId">
                                    @GetAircraftDisplayName(@aircraftId)
                                </SelectedTemplate>
                                <ResultTemplate Context="aircraft">
                                    @aircraft.Name
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <div class="form-group flex-block">
                            <label>Count</label>
                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                        </div>
                        <InputDataBase ClassString="flex-block" Label="Carrier" @bind-Value="flight.Carrier"
                        DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt="N/A" />
                        <div class="flex-block form-group">
                            <label>Livery</label>
                            <select class="form-control selectpicker" @bind=flight.Livery>
                                @foreach (var item in GetLiveries(flight.Aircraft))
                                {
                                    <option value="@item">@item</option>
                                    // Blazor needs to know what values it binds to!
                                }
                            </select>
                        </div>
                        <div class="form-group flex-block">
                            <label class="checkbox-wrapper row-checkbox">
                                <input type="checkbox" checked=@flight.AIWingmen
                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                <span>AI Wingmen</span>
                            </label>
                             @if(Template.PlayerFlightGroups.First() != flight)
                            {
                                <label class="checkbox-wrapper row-checkbox">
                                    <input type="checkbox" checked=@flight.Hostile
                                        @onchange="eventArgs => { flight.Hostile = (bool)eventArgs.Value; StateHasChanged();}" />
                                        <span>Hostile</span>
                                </label>
                            }
                        </div>
                        <div class="form-group flex-box">
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => CloneFlightGroup(flight)"  title="Clone Flight Group"><span class="oi oi-layers"></span></button>
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => RemoveFlightGroup(flight)"><span class="oi oi-x"></span></button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-secondary" @onclick="AddFlightGroup">+</button>
                @if(Template.AircraftPackages.Count > 0)
                {
                   <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;Strike Package configuration found that can only be edited in Full builder.
                   <a @onclick="() => ClearStrikePackages()" style="color: #0366d6;">Remove strike packages</a></p>  
                }
                <hr />
            </div>
            <div id="objectives" class="generator-block">
                <h3>Objectives</h3>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <div class="form-group flex-block">
                        <label>Objective distance (zero means random)</label>
                        <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistance">
                        </InputNumber>
                    </div>
                    <div class="form-group flex-block">
                        <label>Objective seperation (zero means random)</label>
                        <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeperation">
                        </InputNumber>
                    </div>
                </div>
                @foreach (var objective in Template.Objectives)
                {
                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                        <InputDataBase ClassString="flex-block" Label="Objective" @bind-Value="objective.Preset"
                        DataBaseType="DatabaseEntryType.ObjectivePreset" HasDescription />
                        <InputEnum ClassString="flex-block" Label="Target count" @bind-Value="objective.TargetCount"
                        EnumType="Amount" />
                        <div class="form-group flex-box">
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => CloneObjective(objective)"  title="Clone Objective"><span class="oi oi-layers"></span></button>
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => RemoveObjective(objective)"><span class="oi oi-x"></span></button>
                        </div>
                    </div>
                        @if(objective.SubTasks.Count > 0)
                        {
                            <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;Custom Subtaks Present from Full Builder:
                                @foreach (var subTask in objective.SubTasks)
                                {
                                    <span>@subTask.Task&nbsp;@subTask.Target&nbsp;@subTask.TargetBehavior&nbsp;@subTask.TargetCount;</span>
                                }
                            &nbsp;<a @onclick="() => ClearSubTasks(objective)" style="color: #0366d6;">Remove Sub Tasks</a>
                            </p>
                        }
                }
                <button type="button" class="btn btn-secondary" @onclick="AddObjective">+</button>
                <hr />
            </div>
            <div id="mission-features" class="generator-block">
                <h3>Mission features</h3>
                <CheckBoxList
                    Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                    TextField="@(item =>item.Name)" DescriptionField="@(item => item.Description)"
                    GroupingField="@(item => item.Category)" ValueField="@(item =>item.ID)"
                    SelectedValues="Template.MissionFeatures" TItem="DatabaseEntryInfo" TItemOutput="string">
                </CheckBoxList>
                <p class="custom-warning"><span class="oi oi-info"></span>
                    @if(Template.OptionsMission.Count > 0)
                    {
                        <span>&nbsp;Options:@string.Join(", ",Template.OptionsMission)</span><br/>
                    }
                    @if(Template.OptionsRealism.Count > 0)
                    {
                        <span>&nbsp;Realisam:@string.Join(", ",Template.OptionsRealism)</span><br/>
                    }
                    @if(Template.Mods.Count > 0)
                    {
                    <span>&nbsp;Mods:@string.Join(", ",Template.Mods)</span>
                    }
                </p>  
            </div>
        </EditForm>
        <div class=bottom-bar>
            <LoggerAll logs="logs" />
        </div>
    </div>
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="logs" />
            <ButtonTrio PrimaryFunc="DownloadMission" PrimaryLabel="Mission" PrimaryIcon="data-transfer-download"
            SecondaryFunc="DownloadBriefing" SecondaryLabel="Briefing" SecondaryIcon="browser"
            TertiaryFunc="ClearMission" TertiaryLabel="" TertiaryIcon="x" />
            <div>@((MarkupString)mission.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {

    private BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom(WriteToDebugLog);
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string tempateMessage;

    public static List<Tuple<LogMessageErrorLevel, string>> logs = new List<Tuple<LogMessageErrorLevel, string>>();

    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
    protected override void OnInitialized()
    {
        Template = new MissionTemplate();
        flightGroupTab = Template.PlayerFlightGroups[0];
        ObjectiveTab = Template.Objectives[0];
    }

    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(errorLevel, message));
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t => clearTemplateMessage());
    }

    private void clearTemplateMessage()
    {
        tempateMessage = "";
        StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());
            var data = await reader.ReadToEndAsync();
            Template.LoadFromString(data);
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        tempateMessage = "Template Saved";
        clearTemplateMessageDelay();
    }

    private Task ClearTemplate()
    {
        tempateMessage = "Template Reset";
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void GenerateMission()
    {
        try
        {
            logs.Clear();
            mission = null;
            errorMessage = "";
            mission = briefingRoom.GenerateMission(Template, true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private Task ClearMission()
    {
        mission = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        byte[] zipBytes = mission.SaveToMizBytes();
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try
        {
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.miz",
            "application/octet-stream", zipBytes);
        }
        catch (Exception) { }
    }

    async Task DownloadBriefing()
    {
        byte[] zipBytes = Encoding.ASCII.GetBytes(mission.Briefing.GetBriefingAsHTML());
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try
        {
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html",
            "text/html", zipBytes);
        }
        catch (Exception) { }
    }

    private MissionTemplateFlightGroup flightGroupTab;
    private void SetFlightGroupTab(MissionTemplateFlightGroup var)
    {
        flightGroupTab = var;
    }

    private void AddFlightGroup()
    {
        MissionTemplateFlightGroup flight = new();
        flightGroupTab = flight;
        Template.PlayerFlightGroups.Add(flight);
    }

    private void CloneFlightGroup(MissionTemplateFlightGroup flight)
    {
        MissionTemplateFlightGroup newflight = new()
        {
            Aircraft = flight.Aircraft,
            AIWingmen = flight.AIWingmen,
            Carrier = flight.Carrier,
            Count = flight.Count,
            Country = flight.Country,
            Payload = flight.Payload,
            StartLocation = flight.StartLocation,
            Livery = flight.Livery
        };
        newflight.Alias = BriefingRoom.GetAlias(Template.PlayerFlightGroups.Count);
        Template.PlayerFlightGroups.Add(newflight);
        flightGroupTab = newflight;
    }

    private void RemoveFlightGroup(MissionTemplateFlightGroup flight)
    {
        Template.PlayerFlightGroups.Remove(flight);
        if (Template.PlayerFlightGroups.Count == 1)
        {
            flightGroupTab = Template.PlayerFlightGroups[0];
        }
    }

    private void ClearStrikePackages()
    {
        Template.AircraftPackages = new List<MissionTemplatePackage>();
    }

    private MissionTemplateObjective ObjectiveTab;
    private void SetObjectiveTab(MissionTemplateObjective var)
    {
        ObjectiveTab = var;
    }

    private void AddObjective()
    {
        MissionTemplateObjective obj = new();
        ObjectiveTab = obj;
        Template.Objectives.Add(obj);
    }

    private void CloneObjective(MissionTemplateObjective obj)
    {
        MissionTemplateObjective newObj = new()
        {
            Target = obj.Target,
            TargetBehavior = obj.TargetBehavior,
            TargetCount = obj.TargetCount,
            Task = obj.Task,
            Options = obj.Options,
            Features = obj.Features
        };
        ObjectiveTab = newObj;
        Template.Objectives.Add(newObj);
    }

    private void RemoveObjective(MissionTemplateObjective obj)
    {
        Template.Objectives.Remove(obj);
    }

    private void ClearSubTasks(MissionTemplateObjective obj)
    {
        obj.SubTasks = new List<MissionTemplateSubTask>();
    }

    private List<string> GetLiveries(string aircraftId) =>
    BriefingRoom.GetAircraftLiveries(aircraftId);

    private async Task<IEnumerable<Country>> SearchCountry(string searchText) =>
    await Typeahead.SearchEnum<Country>(searchText);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchAircraft(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.UnitFlyableAircraft, searchText);
    private string GetAircraftDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.UnitFlyableAircraft, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchObjectiveType(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.ObjectiveTask, searchText);
    private string GetObjectiveTypeDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTask, id);

    private string GetObjectiveTargetDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTarget, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchCoalition(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.Coalition, searchText);

    private string GetCoalitionDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.Coalition, id);
}