@page "/SituationEditor"
@inject IJSRuntime JSRuntime
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data.JSON
@using Newtonsoft.Json
@using System.IO
@using Polly


<div class="title-bar">
  <h1>@BriefingRoom.Translate("SituationEditor")</h1>
  <SituationButtons Title="Situation" LoadSituationFile="LoadSituationFile" SaveSituation="SaveSituation"
    ClearSituation="ClearSituation" />
</div>
<div class="generator-group">
  <div class="generator-form">
    <div>
      @if (!string.IsNullOrEmpty(errorMessage))
      {
        <div class="alert alert-danger" role="alert">
          Error: @errorMessage
        </div>
      }
    </div>
    <div class="full-width">
      <EditForm Model="ContextTheater">
        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Theater") @bind-Value="ContextTheater"
          DataBaseType="DatabaseEntryType.Theater" />
        <button class="btn btn-primary form-control"
        @onclick="() => GetMapAsync()">@BriefingRoom.Translate("SetMap")</button>
        <div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="sideRadio" value="BLUE" id="RadioBLUFOR" checked>
          <label class="form-check-label" for="RadioBLUFOR">
            @BriefingRoom.Translate("Blue")
          </label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="sideRadio" value="RED" id="RadioREDFOR">
          <label class="form-check-label" for="RadioREDFOR">
            @BriefingRoom.Translate("Red")
          </label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="sideRadio" value="NEUTRAL" id="RadioNEUTRAL">
          <label class="form-check-label" for="RadioNEUTRAL">
            @BriefingRoom.Translate("Neutral")
          </label>
        </div>
      </EditForm>
    </div>
    <div>
      <div id="situationMap"></div>
      <button class="btn btn-primary form-control"
      @onclick="() => GenerateSituation()">@BriefingRoom.Translate("GenerateSituation")</button>
      @if (!String.IsNullOrEmpty(GeneratedSituationInI))
      {
        <div>
          <h3>@BriefingRoom.Translate("GeneratedSituation")</h3>
          <p>@BriefingRoom.Translate("GeneratedSituationInstructions")</p>
          <textarea @bind="GeneratedSituationInI" class="form-control long" spellcheck="true"></textarea>
          <p>@BriefingRoom.Translate("GeneratedSituationJsonNote")</p>
          <textarea @bind="GeneratedSituationJSON" class="form-control long" spellcheck="true"></textarea>
        </div>
      }
    </div>
  </div>
</div>

@code {
  private string errorMessage;
  private string ContextTheater = "Caucasus";
  private string GeneratedSituationInI = "";
  private string GeneratedSituationJSON = "";

  private async System.Threading.Tasks.Task GetMapAsync()
  {
    await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await
    JSRuntime.InvokeVoidAsync("RenderEditorMap", ContextTheater));
  }

  private async System.Threading.Tasks.Task GenerateSituation()
  {
    errorMessage = "";
    try
    {
      var result = await JSRuntime.InvokeAsync<SituationZones>("GetSituationCoordinates", ContextTheater);
      if (String.IsNullOrEmpty(GeneratedSituationInI))
      {
        GeneratedSituationInI = $@"[GUI]
DisplayName=<NAME HERE>

[BriefingDescription]
briefing000=<BRIEFING DESCRIPTION>
briefing001=<ALTERNATE BRIEFING DESCRIPTION>
; You can add more if you want just increment the number up

[Situation]
Theater={ContextTheater}
; RelatedSituations=<FILE NAMES OF LINKED SITUATIONS FOR CAMPAIGNS>
";
      }
      GeneratedSituationJSON = JsonConvert.SerializeObject(result, Formatting.Indented);
    }
    catch (System.Exception e)
    {
      errorMessage = $"Must have Red and Blue Zones and all points within orange box {e.Message}";
      return;
    }

  }

  private async System.Threading.Tasks.Task ClearSituation()
  {
    GeneratedSituationJSON = "";
    GeneratedSituationInI = "";
    await JSRuntime.InvokeVoidAsync("ClearMap");
    StateHasChanged();
  }

  private async System.Threading.Tasks.Task LoadSituationFile(InputFileChangeEventArgs e)
  {
    try
    {
      var targetFile = e.File.OpenReadStream(BriefingRoom.MAXFILESIZE);
      using var reader = new StreamReader(targetFile);
      var data = await reader.ReadToEndAsync();
      if(e.File.Name.EndsWith(".ini")){
        GeneratedSituationInI = data;
        var ini = INIFile.CreateFromRawINIString(data);
        ContextTheater = ini.GetValue<string>("Situation", "Theater");
      }

      await GetMapAsync();

      if(e.File.Name.EndsWith(".json"))
      {
        GeneratedSituationJSON = data;
        await JSRuntime.InvokeVoidAsync("SetSituationZones", data, ContextTheater);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      errorMessage = $"Failed to Load Template (Template may no longer be compatable): {ex.Message}";
    }
  }

  private async System.Threading.Tasks.Task SaveSituation()
  {
    try
    {
      await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{ContextTheater}CustomSituation.ini",
      "application/octet-stream", GeneratedSituationInI);
      await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{ContextTheater}CustomSituation.json",
      "application/octet-stream", GeneratedSituationJSON);
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      return;
    }
  }
}
