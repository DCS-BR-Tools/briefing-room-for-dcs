@page "/SituationEditor"
@inject IJSRuntime JSRuntime
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data.JSON
@using Newtonsoft.Json
@using System.IO
@using Polly


<div class="title-bar">
  <h1>@BriefingRoom.Translate("SituationEditor")</h1>
  <TemplateButtons Title="Situation" LoadTemplate="LoadSituationFile" SaveTemplate="SaveSituation"
    ClearTemplate="ClearSituation" AcceptString=".json" />
</div>
<div class="generator-group">
  <div class="generator-form">
    <div>
      @if (!string.IsNullOrEmpty(errorMessage))
      {
        <div class="alert alert-danger" role="alert">
          Error: @errorMessage
        </div>
      }
    </div>
    <div class="full-width">
      <EditForm Model="ContextTheater">
        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Theater") @bind-Value="ContextTheater"
          DataBaseType="DatabaseEntryType.Theater" />
        <button class="btn btn-primary form-control"
        @onclick="() => GetMapAsync()">@BriefingRoom.Translate("SetMap")</button>
        @if (MapLoaded)
        {
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="sideRadio" value="BLUE" id="RadioBLUFOR" checked>
            <label class="form-check-label" for="RadioBLUFOR">
              @BriefingRoom.Translate("Blue")
            </label>
          </div>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="sideRadio" value="RED" id="RadioREDFOR">
            <label class="form-check-label" for="RadioREDFOR">
              @BriefingRoom.Translate("Red")
            </label>
          </div>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="sideRadio" value="NEUTRAL" id="RadioNEUTRAL">
            <label class="form-check-label" for="RadioNEUTRAL">
              @BriefingRoom.Translate("Neutral")
            </label>
          </div>
        }
      </EditForm>
    </div>
    <div>
      <div id="situationMap"></div>
      @if (MapLoaded)
      {
        <button class="btn btn-primary form-control"
        @onclick="() => GenerateSituation()">@BriefingRoom.Translate("GenerateSituation")</button>
        @if (!String.IsNullOrEmpty(GeneratedSituationJSON))
        {
          <div>
            <h3>@BriefingRoom.Translate("GeneratedSituation")</h3>
            <p>@BriefingRoom.Translate("GeneratedSituationInstructions")</p>
            <textarea @bind="GeneratedSituationJSON" class="form-control long" spellcheck="true"></textarea>
          </div>
        }
      }
    </div>
  </div>
</div>

@code {
  private string errorMessage;
  private string ContextTheater = "Caucasus";
  private string GeneratedSituationJSON = "";
  private Situation ExistingSituation = new Situation();
  private bool MapLoaded = false;

  private async System.Threading.Tasks.Task GetMapAsync()
  {
    await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await
    JSRuntime.InvokeVoidAsync("RenderEditorMap", ContextTheater, BriefingRoom.GetTheaterSpawnPoints(ContextTheater)));
    MapLoaded = true;
  }

  private async System.Threading.Tasks.Task GenerateSituation()
  {
    errorMessage = "";
    try
    {
      var result = await JSRuntime.InvokeAsync<Situation>("GetSituationCoordinates", ContextTheater);
      result.Theater = ContextTheater;
      result.BriefingDescriptions = ExistingSituation.BriefingDescriptions;
      result.DisplayName = ExistingSituation.DisplayName;
      result.RelatedSituations = ExistingSituation.RelatedSituations;
      GeneratedSituationJSON = JsonConvert.SerializeObject(result, Formatting.Indented);
    }
    catch (System.Exception e)
    {
      errorMessage = $"Must have Red and Blue Zones and all points within orange box {e.Message}";
      return;
    }

  }

  private async System.Threading.Tasks.Task ClearSituation()
  {
    GeneratedSituationJSON = "";
    ExistingSituation = new Situation();
    await JSRuntime.InvokeVoidAsync("ClearMap");
    MapLoaded = false;
    StateHasChanged();
  }

  private async System.Threading.Tasks.Task LoadSituationFile(InputFileChangeEventArgs e)
  {
    try
    {
      var targetFile = e.File.OpenReadStream(BriefingRoom.MAXFILESIZE);
      using var reader = new StreamReader(targetFile);
      var data = await reader.ReadToEndAsync();
      GeneratedSituationJSON = data;
      ExistingSituation = JsonConvert.DeserializeObject<Situation>(data);
      ContextTheater = ExistingSituation.Theater;
      await GetMapAsync();
      await JSRuntime.InvokeVoidAsync("SetSituationZones", data, ContextTheater);

    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      errorMessage = $"Failed to Load Siuation (Siuation may no longer be compatable): {ex.Message}";
    }
  }

  private async System.Threading.Tasks.Task SaveSituation()
  {
    try
    {
      try
      {
        JsonConvert.DeserializeObject<Situation>(GeneratedSituationJSON);
      }
      catch (Exception ex)
      {
        errorMessage = $"Failed to Save situation (JSON may be invalid): {ex.Message}";
        StateHasChanged();
        return;
      }
      await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{ContextTheater}CustomSituation.json",
      "application/octet-stream", GeneratedSituationJSON);
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      return;
    }
  }
}
