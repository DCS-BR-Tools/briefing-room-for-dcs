@page "/BriefingEditor"
@inject IJSRuntime JSRuntime
@using System.Reflection
@using BriefingRoom4DCS
@using System.IO.Compression
@using System.IO
@using System.Text.RegularExpressions
@using System.Text

<div class="title-bar">
  <h1>@BriefingRoom.Translate("BriefingEditor")</h1>
  <TemplateButtons Title="Mission" LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate"
    AcceptString=".miz" />
</div>
<div class="generator-group">
  <div class="generator-form">
    <div>
      @if (!string.IsNullOrEmpty(errorMessage))
      {
        <div class="alert alert-danger" role="alert">
          Error: @errorMessage
        </div>
      }
    </div>
    <div class="full-width">
      <h2>@BriefingRoom.Translate("Situation")</h2>
      <textarea @bind="situation" class="form-control long" spellcheck="true"
        placeholder=@BriefingRoom.Translate("SituationPlaceholder")></textarea>
    </div>
    <div class="full-width">
      <h2>@BriefingRoom.Translate("BlueTask")</h2>
      <textarea @bind="blueTask" class="form-control short" spellcheck="true"
        placeholder=@BriefingRoom.Translate("BlueTaskPlaceholder")></textarea>
    </div>
    <div class="full-width">
      <h2>@BriefingRoom.Translate("RedTask")</h2>
      <textarea @bind="redTask" class="form-control short" spellcheck="true"
        placeholder=@BriefingRoom.Translate("RedTaskPlaceholder")></textarea>
    </div>
    <div class="full-width">
      <h2>@BriefingRoom.Translate("NeutralTask")</h2>
      <textarea @bind="neutralTask" class="form-control short" spellcheck="true"
        placeholder=@BriefingRoom.Translate("NeutralTaskPlaceholder")></textarea>
    </div>
  </div>
</div>

@code {
  private string errorMessage;
  private string situation;
  private string situationDictKey = "";
  private string blueTask;
  private string blueTaskDictKey = "";
  private string redTask;
  private string redTaskDictKey = "";
  private string neutralTask;
  private string neutralTaskDictKey = "";

  private IBrowserFile file;

  private Regex GetRegex(string target) => new Regex($@"\[""{target}""\] = ""(.|\n)*?"",\n", RegexOptions.IgnoreCase);
  private async Task LoadTemplate(InputFileChangeEventArgs e)
  {
    errorMessage = "";
    try
    {
      using var ms = new MemoryStream();
      await e.File.OpenReadStream(BriefingRoom.MAXFILESIZE).CopyToAsync(ms);
      using var zip = new ZipArchive(ms);
      if (!zip.Entries.Any(entry => entry.Name == "mission"))
        throw new Exception("Mission File not found");
      if (!zip.Entries.Any(entry => entry.Name == "dictionary"))
        throw new Exception("Dictionary File not found");

      using var reader = new StreamReader(zip.Entries.First(entry => entry.Name == "mission").Open());
      var mission = await reader.ReadToEndAsync();

      using var reader2 = new StreamReader(zip.Entries.First(entry => entry.Name == "dictionary").Open());
      var dictonary = await reader2.ReadToEndAsync();

      situationDictKey = "";
      situation = getFromField(mission, "descriptionText");
      if (situation.StartsWith("DictKey_"))
      {
        situationDictKey = situation;
        situation = getFromField(dictonary, situation);
      }

      blueTaskDictKey = "";
      blueTask = getFromField(mission, "descriptionBlueTask");
      if (blueTask.StartsWith("DictKey_"))
      {
        blueTaskDictKey = blueTask;
        blueTask = getFromField(dictonary, blueTask);
      }

      redTaskDictKey = "";
      redTask = getFromField(mission, "descriptionRedTask");
      if (redTask.StartsWith("DictKey_"))
      {
        redTaskDictKey = redTask;
        redTask = getFromField(dictonary, redTask);
      }

      neutralTaskDictKey = "";
      neutralTask = getFromField(mission, "descriptionNeutralsTask");
      if (neutralTask.StartsWith("DictKey_"))
      {
        neutralTaskDictKey = neutralTask;
        neutralTask = getFromField(dictonary, neutralTask);
      }

      file = e.File;
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      errorMessage = ex.Message;
    }
  }

  private string getFromField(string data, string target)
  {
    var regex = GetRegex(target);
    return regex.Match(data).Value
    .Replace($"[\"{target}\"] = \"", "")
    .Replace("\\", "")
    .TrimEnd('\n')
    .TrimEnd(',')
    .TrimEnd('"');
  }

  private async Task SaveTemplate()
  {
    errorMessage = "";
    try
    {
      if (file == null)
      {
        throw new Exception("File not loaded load a mission file first.");
      }
      using (var ms = new MemoryStream())
      {
        await file.OpenReadStream(BriefingRoom.MAXFILESIZE).CopyToAsync(ms);
        using (var zip = new ZipArchive(ms, ZipArchiveMode.Update))
        {
          if (!zip.Entries.Any(entry => entry.Name == "mission"))
            throw new Exception("Mission File not found");
          var entryMission = zip.Entries.First(entry => entry.Name == "mission");
          var mission = "";
          using (var stream = entryMission.Open())
          {
            var reader = new StreamReader(stream);
            mission = await reader.ReadToEndAsync();
          }
          entryMission.Delete();

          var entryDict = zip.Entries.First(entry => entry.Name == "dictionary");
          var dictionary = "";
          using (var stream = entryDict.Open())
          {
            var reader = new StreamReader(stream);
            dictionary = await reader.ReadToEndAsync();
          }
          entryDict.Delete();

          var replacedMission = mission;
          var replacedDict = dictionary;
          if (string.IsNullOrEmpty(situationDictKey))
            replacedMission = replaceValue(dictionary, "descriptionText", situation);
          else
            replacedDict = replaceValue(dictionary, situationDictKey, situation);

          if (string.IsNullOrEmpty(blueTaskDictKey))
            replacedMission = replaceValue(dictionary, "descriptionBlueTask", situation);
          else
            replacedDict = replaceValue(dictionary, blueTaskDictKey, blueTask);

          if (string.IsNullOrEmpty(redTaskDictKey))
            replacedMission = replaceValue(dictionary, "descriptionRedTask", situation);
          else
            replacedDict = replaceValue(dictionary, redTaskDictKey, redTask);

          if (string.IsNullOrEmpty(neutralTaskDictKey))
            replacedMission = replaceValue(dictionary, "descriptionNeutralsTask", situation);
          else
            replacedDict = replaceValue(dictionary, neutralTaskDictKey, neutralTask);

          var newMissionEntry = zip.CreateEntry("mission");
          using (var newStream = newMissionEntry.Open())
          {
            using var writer = new StreamWriter(newStream);
            writer.Write(replacedMission);
          }
          var newDictEntry = zip.CreateEntry("l10n\\DEFAULT\\dictionary");
          using (var newStream = newDictEntry.Open())
          {
            using var writer = new StreamWriter(newStream);
            writer.Write(replacedDict);
          }
        }
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", file.Name, "application/octet-stream", ms.ToArray());
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex);
      errorMessage = ex.Message;
    }
    StateHasChanged();
  }

  private string replaceValue(string data, string target, string value)
  {
    var regex = GetRegex(target);
    value = value.Replace("\"", "\\\"").Replace("\n", "\\\n");
    return regex.Replace(data, $"[\"{target}\"] = \"{value}\",\n");
  }

  private Task ClearTemplate()
  {
    situation = "";
    file = null;
    errorMessage = "";
    StateHasChanged();
    return Task.CompletedTask;
  }
}
