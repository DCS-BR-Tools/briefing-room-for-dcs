@page "/FullBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
<div class="title-bar">
    <h1>Full Mission Generator</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" />
</div>
<div class="generator-group">
    <div class="generator-form">
        <div>
            @if(!string.IsNullOrEmpty(tempateMessage)){
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
                }
            @if(!string.IsNullOrEmpty(errorMessage)){
            <div class="alert alert-danger" role="alert">
                Error: @errorMessage
            </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMission">
            <DataAnnotationsValidator />
            <ValidationSummary />
                <button class="btn btn-primary form-control" type="submit">Generate</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value)'>@textInfo.ToTitleCase(value).Replace("-", " ")</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context":
                    <div id="context" class="generator-block">
                        <h3>Context</h3>
                        <div class="form-group">
                            <label>Blue coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionBlue" 
                        EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                        </div>
                        <div class="form-group">
                            <label>Red coalition</label>
                        <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionRed" 
                        EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                @GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                        </div>
                        <InputEnum Label="Time period" @bind-Value="Template.ContextDecade" EnumType="Decade"/>
                        <InputEnum Label="Player coalition" @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition"/>
                        <InputDataBase Label="Theater" @bind-Value="Template.ContextTheater" DataBaseType="DatabaseEntryType.Theater"/>
                    </div>
                    break;
                case "environment":
                    <div id="environment" class="generator-block">
                        <h3>Environment</h3>
                        <InputEnum Label="Season" @bind-Value="Template.EnvironmentSeason" EnumType="Season"/>
                        <InputEnum Label="Time of day" @bind-Value="Template.EnvironmentTimeOfDay" EnumType="TimeOfDay"/>
                        <InputDataBase Label="Weather preset" @bind-Value="Template.EnvironmentWeatherPreset" DataBaseType="DatabaseEntryType.WeatherPreset" EmptOpt="Random"/>
                        <InputEnum Label="Wind" @bind-Value="Template.EnvironmentWind" EnumType="Wind"/>
                    </div>
                    break;
                case "flight-plan":
                    <div id="flight-plan" class="generator-block">
                        <h3>Flight Plan</h3>
                        <div class="form-group">
                            <label>Objective distance (zero means random)</label>
                            <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistance"></InputNumber>
                        </div>
                        <InputDataBase Label="Main airbase" @bind-Value="Template.FlightPlanTheaterStartingAirbase" DataBaseType="DatabaseEntryType.Airbase" Grouping="@Template.ContextTheater" EmptOpt="Random"/>
                    </div>
                    break;
                case "objectives":
                    <div id="objectives" class="generator-block">
                        <h3>Objectives</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.Objectives)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(ObjectiveTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetObjectiveTab(value)'>
                                        Objective @value.Alias
                                        @if (Template.Objectives.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  RemoveObjective(value)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="AddObjective">+</a>
                            </li>
                        </ul>

                        @foreach (var objective in Template.Objectives)
                        {
                            if (ObjectiveTab == objective)
                            {
                                <div class="flight-group">
                                    <button type="button" class="btn btn-secondary" @onclick="() => CloneObjective(objective)">Duplicate</button>
                                    <InputDataBase Label="Task" @bind-Value="objective.Task" DataBaseType="DatabaseEntryType.ObjectiveTask"/>
                                    <InputDataBase Label="Target" @bind-Value="objective.Target" DataBaseType="DatabaseEntryType.ObjectiveTarget"/>
                                    <InputDataBase Label="Target behavior" @bind-Value="objective.TargetBehavior" DataBaseType="DatabaseEntryType.ObjectiveTargetBehavior"/>
                                    <InputEnum Label="Target count" @bind-Value="objective.TargetCount" EnumType="Amount"/>
                                    <div class="form-group">
                                        <h4>Objective features</h4>
                                        <CheckBoxList
                                            Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.ObjectiveFeature).ToList()"
                                            TextField="@((item)=>item.Name + "|" + item.Description)" ValueField="@((item)=>item.ID)"
                                            SelectedValues="objective.Features" TItem="DatabaseEntryInfo" TItemOutput="string">
                                        </CheckBoxList>
                                    </div>
                                    <div class="form-group">
                                        <h4>Objective options</h4>
                                        <CheckBoxList Data="Enum.GetValues(typeof(ObjectiveOption)).Cast<ObjectiveOption>()"
                                            TextField="@((item)=>BriefingRoomGUITools.GetEnumName(item) + "|" + BriefingRoomGUITools.GetEnumDescription(item))" ValueField="@((item)=>item)"
                                            SelectedValues="objective.Options" TItem="ObjectiveOption" TItemOutput="ObjectiveOption">
                                        </CheckBoxList>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    break;
                case "options":
                    <div id="options" class="generator-block">
                        <h3>Options</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                        <div class="form-group">
                            <h4>Mission features</h4>
                            <CheckBoxList
                        Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                        TextField="@((item)=>item.Name + "|" + item.Description)" ValueField="@((item)=>item.ID)"
                        SelectedValues="Template.MissionFeatures" TItem="DatabaseEntryInfo" TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Mission options</h4>
                            <CheckBoxList Data="Enum.GetValues(typeof(MissionOption)).Cast<MissionOption>()"
                        TextField="@((item)=>BriefingRoomGUITools.GetEnumName(item) + "|" + BriefingRoomGUITools.GetEnumDescription(item))" ValueField="@((item)=>item)"
                        SelectedValues="Template.OptionsMission" TItem="MissionOption" TItemOutput="MissionOption">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Realism options</h4>
                            <CheckBoxList Data="Enum.GetValues(typeof(RealismOption)).Cast<RealismOption>()"
                        TextField="@((item)=>BriefingRoomGUITools.GetEnumName(item))" ValueField="@((item)=>item)"
                        SelectedValues="Template.OptionsRealism" TItem="RealismOption" TItemOutput="RealismOption">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Unit mods</h4>
                            <CheckBoxList
                        Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.DCSMod).ToList()"
                        TextField="@((item)=>item.Name + "|" + item.Description)" ValueField="@((item)=>item.ID)" SelectedValues="Template.Mods"
                        TItem="DatabaseEntryInfo" TItemOutput="string">
                            </CheckBoxList>
                        </div>
                    </div>
                    break;
                case "situation":
                    <div id="situation" class="generator-block">
                        <h3>Situation</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in situationTabs)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(situationTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetSituationTab(value)'>@textInfo.ToTitleCase(value).Replace("-", " ")</a>
                                </li>
                            }
                        </ul>
                        @switch (situationTab)
                        {
                            case "enemies":
                                <div id="enemies">
                                    <h4>Enemies</h4>
                                    <InputEnum Label="Air defense" @bind-Value="Template.SituationEnemyAirDefense" EnumType="AmountNR"/>
                                    <InputEnum Label="Air force" @bind-Value="Template.SituationEnemyAirForce" EnumType="AmountNR"/>
                                </div>
                                break;
                            case "friendlies":
                                <div id="friendlies">
                                    <h4>Friendlies</h4>
                                    <InputEnum Label="Air defense" @bind-Value="Template.SituationFriendlyAirDefense" EnumType="AmountNR"/>
                                    <InputEnum Label="Air force" @bind-Value="Template.SituationFriendlyAirForce" EnumType="AmountNR"/>
                                </div>
                                break;
                        }
                    </div>
                    break;
                case "flight-groups":
                    <div id="flight-groups" class="generator-block">
                        <h3>Player flight groups</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.PlayerFlightGroups)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(flightGroupTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetFlightGroupTab(value)'>
                                       @value.Alias: @GetAircraftDisplayName(@value.Aircraft) x @value.Count
                                        @if (Template.PlayerFlightGroups.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  RemoveFlightGroup(value)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="AddFlightGroup">+</a>
                            </li>
                        </ul>

                        @foreach (var flight in Template.PlayerFlightGroups)
                        {
                            if (flightGroupTab == flight)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <label>Aircraft</label>
                                        <BlazoredTypeahead SearchMethod="SearchAircraft" @bind-Value="flight.Aircraft"
                                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                                            MaximumSuggestions="1000">
                                            <SelectedTemplate Context="aircraftId">
                                                @GetAircraftDisplayName(@aircraftId)
                                            </SelectedTemplate>
                                            <ResultTemplate Context="aircraft">
                                                @aircraft.Name
                                            </ResultTemplate>
                                        </BlazoredTypeahead>
                                    </div>
                                    <div class="form-group">
                                        <label>Count</label>
                                        <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                                    </div>
                                    <label>Payload</label>
                                    <select class="form-control selectpicker" @bind=flight.Payload>
                                        @foreach (var item in GetAircraftPayloads(flight.Aircraft))
                                        {
                                            <option value="@item">@BriefingRoom.FormatPayload(item)</option> // Blazor needs to know what values it binds to!
                                        }
                                    </select>
                                    <InputEnum Label="Start location" @bind-Value="flight.StartLocation" EnumType="PlayerStartLocation"/>
                                    <InputDataBase Label="Carrier" @bind-Value="flight.Carrier" DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt="N/A"/>
                                    <div class="form-group">
                                        <label>Country</label>
                                        <BlazoredTypeahead SearchMethod="SearchCountry" @bind-Value="flight.Country"
                                            EnableDropDown="true" DisableClear="true" MaximumSuggestions="1000">
                                            <SelectedTemplate Context="country">
                                                @country
                                            </SelectedTemplate>
                                            <ResultTemplate Context="country">
                                                @country
                                            </ResultTemplate>
                                        </BlazoredTypeahead>
                                    </div>
                                    <div class="form-group">
                                        <label>Livery</label>
                                        <select class="form-control selectpicker" @bind=flight.Livery>
                                        @foreach (var item in GetLiveries(flight.Aircraft))
                                        {
                                            <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                        }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="checkboxList-item">
                                            <input type="checkbox" checked=@flight.AIWingmen
                                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                                <span>AI Wingmen</span>
                                        </label>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    break;
                case "packages":
                    <div id="flight-groups" class="generator-block">
                        <h3>Packages</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.AircraftPackages)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(packageTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetPackageTab(value)'>
                                        @value.Alias
                                            <a class="delete-flight" @onclick="() =>  RemovePackage(value)">x</a>
                                    </a>
                                </li>
                            }
                            @if(Template.PlayerFlightGroups.Count > 1)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" @onclick="AddPackage">+</a>
                                </li>
                            } else {
                            <li class="nav-item">
                                <p>Must have more than one flight group to use Packaging</p>
                            </li>
                            }
                        </ul>

                        @foreach (var package in Template.AircraftPackages)
                        {
                            if (packageTab == package)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <label>Objectives</label>
                                         <CheckBoxList
                                            Data="Template.Objectives"
                                            TextField="@((item)=>item.Alias + ": " + item.Task + "-" + item.Target)"
                                            ValueField="@((item)=>Template.Objectives.IndexOf(item))"
                                            SelectedValues="package.ObjectiveIndexes"
                                            TItem="MissionTemplateObjective" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <div class="form-group">
                                        <label>Flight Groups</label>
                                         @* TODO: Filter for flights in other packages *@
                                        <CheckBoxList
                                            Data="GetAvailableFlightGroups(package)"
                                            TextField="@((item)=>item.Alias + ": " + item.Aircraft + " x " + item.Count)"
                                            ValueField="@((item)=>Template.PlayerFlightGroups.IndexOf(item))"
                                            SelectedValues="package.FlightGroupIndexes"
                                            TItem="MissionTemplateFlightGroup" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <InputDataBase 
                                        Label="Starting airbase"
                                        @bind-Value="package.StartingAirbase"
                                        DataBaseType="DatabaseEntryType.Airbase"
                                        Grouping="@Template.ContextTheater"
                                        CustomOpt="Home Base,home"
                                        />
                                </div>
                            }
                        }
                    </div>
                    break;

            }
        </EditForm>
    </div>
    @* TODO: COMPONENT CANDIDATE *@
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadMission"  PrimaryLabel="Mission" PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel="Briefing" SecondaryIcon="browser"
              TertiaryFunc="ClearMission"  TertiaryLabel="" TertiaryIcon="x"
            />
            <div>@((MarkupString)mission.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {
    private BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom(WriteToDebugLog);
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string tempateMessage;
    public static List<Tuple<LogMessageErrorLevel, string>> logs = new List<Tuple<LogMessageErrorLevel, string>>();

    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
    protected override void OnInitialized()
    {
        Template = new MissionTemplate();
        flightGroupTab = Template.PlayerFlightGroups[0];
        ObjectiveTab = Template.Objectives[0];
    }

    
    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(errorLevel, message));
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t=> clearTemplateMessage());
    }

    private void clearTemplateMessage()
    {
     tempateMessage = "";
     StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());
            var data = await reader.ReadToEndAsync();
            Template.LoadFromString(data); 
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        tempateMessage = "Template Saved"; 
        clearTemplateMessageDelay();
    }

    private Task ClearTemplate()
    {
        tempateMessage = "Template Reset"; 
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void GenerateMission()
    {
        try {
            logs.Clear();
            mission = null;
            errorMessage = "";
            mission = briefingRoom.GenerateMission(Template);
            StateHasChanged();
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private Task ClearMission()
    {
        mission = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        byte[] zipBytes = mission.SaveToMizBytes();
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes); }
        catch (Exception) { }
    }

    async Task DownloadBriefing()
    {
        byte[] zipBytes = Encoding.UTF8.GetBytes(mission.Briefing.GetBriefingAsHTML());
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html", "text/html", zipBytes); }
        catch (Exception) { }
    }

    private string tab = "context";
    private List<string> tabs = new List<string>{
"context",
"environment",
"objectives",
"flight-groups",
"flight-plan",
"packages",
"situation",
"options",
};
    private void SetTab(string var)
    {
        tab = var;
    }



    private string situationTab = "enemies";
    private List<string> situationTabs = new List<string> { "enemies", "friendlies" };
    private void SetSituationTab(string var)
    {
        situationTab = var;
    }

    private MissionTemplateFlightGroup flightGroupTab;
    private void SetFlightGroupTab(MissionTemplateFlightGroup var)
    {
        flightGroupTab = var;
    }

    private void AddFlightGroup()
    {
        MissionTemplateFlightGroup flight = new();
        flightGroupTab = flight;
        flight.Alias = BriefingRoom.GetAlias(Template.PlayerFlightGroups.Count);
        Template.PlayerFlightGroups.Add(flight);
    }

    private void RemoveFlightGroup(MissionTemplateFlightGroup flight)
    {
        Template.PlayerFlightGroups.Remove(flight);
        if (Template.PlayerFlightGroups.Count == 1)
        {
            flightGroupTab = Template.PlayerFlightGroups[0];
        }
    }


    private MissionTemplatePackage packageTab;
    private void SetPackageTab(MissionTemplatePackage var)
    {
        packageTab = var;
    }

    private void AddPackage()
    {
        MissionTemplatePackage package = new();
        packageTab = package;
        package.Alias = BriefingRoom.GetAlias(Template.AircraftPackages.Count);
        Template.AircraftPackages.Add(package);
    }

    private void RemovePackage(MissionTemplatePackage package)
    {
        Template.AircraftPackages.Remove(package);
        if (Template.AircraftPackages.Count == 1)
        {
            packageTab = Template.AircraftPackages[0];
        }
    }

    private List<MissionTemplateFlightGroup> GetAvailableFlightGroups(MissionTemplatePackage package)
    {
        var restOfPackages = Template.AircraftPackages.Where(x => x != package);
        return Template.PlayerFlightGroups.Where((v,i) => package.FlightGroupIndexes.Contains(i) || !restOfPackages.Any(y => y.FlightGroupIndexes.Contains(i))).ToList();
    }

    private MissionTemplateObjective ObjectiveTab;
    private void SetObjectiveTab(MissionTemplateObjective var)
    {
        ObjectiveTab = var;
    }

    private void AddObjective()
    {
        MissionTemplateObjective obj = new();
        ObjectiveTab = obj;
        obj.Alias = BriefingRoom.GetAlias(Template.Objectives.Count);
        Template.Objectives.Add(obj);
    }

    private void CloneObjective(MissionTemplateObjective obj) {
        MissionTemplateObjective newObj = new(){
            Target = obj.Target,
            TargetBehavior = obj.TargetBehavior,
            TargetCount = obj.TargetCount,
            Task = obj.Task,
            Options = obj.Options,
            Features = obj.Features
        };
        ObjectiveTab = newObj;
        newObj.Alias = BriefingRoom.GetAlias(Template.Objectives.Count);
        Template.Objectives.Add(newObj);
    }

    private void RemoveObjective(MissionTemplateObjective obj)
    {
        Template.Objectives.Remove(obj);
    }

    private List<string> GetLiveries(string aircraftId) =>
        BriefingRoom.GetAircraftLiveries(aircraftId);

    private List<string> GetAircraftPayloads(string aircraftId) =>
        BriefingRoom.GetAircraftPayloads(aircraftId);

    private async Task<IEnumerable<Country>> SearchCountry(string searchText) =>
    await Typeahead.SearchEnum<Country>(searchText);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchAircraft(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.UnitFlyableAircraft, searchText);
    private string GetAircraftDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.UnitFlyableAircraft, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchObjectiveType(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.ObjectiveTask, searchText);
    private string GetObjectiveTypeDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTask, id);

    private string GetObjectiveTargetDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTarget, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchCoalition(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.Coalition, searchText);

    private string GetCoalitionDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.Coalition, id);
}