@page "/FullBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
@using Polly
@using System.IO.Compression
<LoadingSpinner ON="spinner"/>
<div class="title-bar">
    <h1>@BriefingRoom.Translate("FullGenerator")</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".brt,.miz" />
</div>
<div class="generator-group">
    @if(showGenerator) {
    <div class="generator-form">
        <div>
            @if(!string.IsNullOrEmpty(tempateMessage)){
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
                }
            @if(!string.IsNullOrEmpty(errorMessage)){
            <div class="alert alert-danger" role="alert">
                @BriefingRoom.Translate("Error"): @errorMessage
            </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMissionAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
                <button class="btn btn-primary form-control" type="submit">@BriefingRoom.Translate("Generate")</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value.Key ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value.Key)'>@BriefingRoom.Translate(value.Value)</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context-&-enviroment":
                    <div id="context" class="generator-block">
                        <h3>@BriefingRoom.Translate("Context")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>@BriefingRoom.Translate("BlueCoalition")</label>
                                <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionBlue" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @BuilderUtils.GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name.Get()
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                            <div class="form-group flex-block">
                                    <label>@BriefingRoom.Translate("RedCoalition")</label>
                                <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionRed" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @BuilderUtils.GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name.Get()
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                        </div>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Theater") @bind-Value="Template.ContextTheater" DataBaseType="DatabaseEntryType.Theater"/>
                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Situation") @bind-Value="Template.ContextSituation" DataBaseType="DatabaseEntryType.Situation" Grouping="@Template.ContextTheater" EmptOpt=@BriefingRoom.Translate("Random") CustomOpt="None (Spawn Anywhere),None"/>
                        </div>
                        <InputDataBase Label=@BriefingRoom.Translate("HomeAirbase") @bind-Value="Template.FlightPlanTheaterStartingAirbase" DataBaseType="DatabaseEntryType.Airbase" Grouping="@Template.ContextTheater" EmptOpt=@BriefingRoom.Translate("Random")/>
                        <InputEnum Label=@BriefingRoom.Translate("TimePeriod") @bind-Value="Template.ContextDecade" EnumType="Decade"/>
                        <InputEnum Label=@BriefingRoom.Translate("PlayerSide") @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition"/>
                    </div>
                    <hr />
                    <div id="environment" class="generator-block">
                        <h3>Environment</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("Season") @bind-Value="Template.EnvironmentSeason" EnumType="Season"/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("TimeOfDay") @bind-Value="Template.EnvironmentTimeOfDay" EnumType="TimeOfDay"/>
                        </div>
                       
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("WeatherPreset") @bind-Value="Template.EnvironmentWeatherPreset" DataBaseType="DatabaseEntryType.WeatherPreset" EmptOpt=@BriefingRoom.Translate("Random")/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("Wind") @bind-Value="Template.EnvironmentWind" EnumType="Wind"/>
                        </div>
                    </div>
                    break;
                case "objectives":
                    <div id="objectives" class="generator-block">
                        <h3>@BriefingRoom.Translate("Objectives")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                                <h6>@BriefingRoom.Translate("ObjectiveDistance")</h6>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Min")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMin">
                                    </InputNumber>
                                </div>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Max")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMax">
                                    </InputNumber>
                                </div>
                            </div>
                            <div class="flex-block">
                                 <h6>@BriefingRoom.Translate("ObjectiveSeperation")</h6>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Min")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeparationMin">
                                    </InputNumber>
                                </div>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Max")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeparationMax">
                                    </InputNumber>
                                </div>
                            </div>
                        </div>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>@BriefingRoom.Translate("BorderLimit")</label>
                                <InputNumber class="form-control" @bind-Value="Template.BorderLimit">
                                </InputNumber>
                            </div>
                        </div>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.Objectives)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(objectiveUtil.Tab == value ? "active" : "")" aria-current="page"
                            @onclick='() => objectiveUtil.SetObjectiveTab(value)'>
                                        @value.Alias
                                        @if (Template.Objectives.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  objectiveUtil.RemoveObjective(value, ref Template)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="() => objectiveUtil.AddObjective(ref Template)">+</a>
                            </li>
                        </ul>

                        @foreach (var objective in Template.Objectives)
                        {
                            if (objectiveUtil.Tab == objective)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <button type="button" class="btn btn-secondary float-right" @onclick="() => objectiveUtil.CloneObjective(objective, ref Template)"  title="Clone Objective"><span class="oi oi-layers"></span></button>
                                        <button type="button" class="btn btn-secondary float-right" @onclick='() => RenderHintMap("OBJECTIVE_"+ objective.Alias)'  title='@BriefingRoom.Translate("TakeHint")'><span class="oi oi-globe"></span></button>
                                        <h4>@BriefingRoom.Translate("Features")</h4>
                                        <CheckBoxList
                                            Data='BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.ObjectiveFeature).Where(x => !x.Category.ContainsValue("Hidden")).ToList()'
                                            TextField="@(item =>item.Name.Get())"
                                            DescriptionField="@(item =>item.Description.Get())"
                                            ValueField="@(item =>item.ID)"
                                            SelectedValues="objective.Features"
                                            TItem="DatabaseEntryInfo"
                                            TItemOutput="string">
                                        </CheckBoxList>
                                    </div>
                                    
                                    <h4>@BriefingRoom.Translate("Tasks")</h4>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Task") @bind-Value="objective.Task" DataBaseType="DatabaseEntryType.ObjectiveTask"/>
                                        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Target") @bind-Value="objective.Target" DataBaseType="DatabaseEntryType.ObjectiveTarget" Grouping="@objective.Task"/>
                                        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("TargetBehavior") @bind-Value="objective.TargetBehavior" DataBaseType="DatabaseEntryType.ObjectiveTargetBehavior" Grouping="@objective.Target"/>
                                        <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("TargetCount") @bind-Value="objective.TargetCount" EnumType="Amount"/>
                                        <button type="button" class="btn btn-secondary row-button" @onclick="() => objectiveUtil.CloneObjectiveTask(objective)"  title="Clone Task"><span class="oi oi-layers"></span></button>
                                    </div>
                                    <div class="form-group">
                                        <CheckBoxList
                                            Data="Enum.GetValues(typeof(ObjectiveOption)).Cast<ObjectiveOption>()"
                                            TextField="@(item =>BriefingRoomGUITools.GetEnumName(item))"
                                            DescriptionField="@(item => BriefingRoomGUITools.GetEnumDescription(item))"
                                            ValueField="@(item =>item)"
                                            SelectedValues="objective.Options"
                                            TItem="ObjectiveOption"
                                            TItemOutput="ObjectiveOption">
                                        </CheckBoxList>
                                    </div>
                                    @foreach (var subTask in objective.SubTasks)
                                    {
                                    <hr/>
                                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Task") @bind-Value="subTask.Task" DataBaseType="DatabaseEntryType.ObjectiveTask"/>
                                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Target") @bind-Value="subTask.Target" DataBaseType="DatabaseEntryType.ObjectiveTarget" Grouping="@subTask.Task"/>
                                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("TargetBehavior") @bind-Value="subTask.TargetBehavior" DataBaseType="DatabaseEntryType.ObjectiveTargetBehavior"/>
                                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("TargetCount") @bind-Value="subTask.TargetCount" EnumType="Amount"/>
                                            <button type="button" class="btn btn-secondary row-button" @onclick="() => objectiveUtil.CloneObjectiveSubTask(subTask, objective)"  title="Clone Task"><span class="oi oi-layers"></span></button>
                                            <button type="button" class="btn btn-secondary row-button" @onclick="() => objectiveUtil.RemoveSubTask(objective, subTask)">x</button>
                                        </div>
                                        <CheckBoxList
                                            Data="Enum.GetValues(typeof(ObjectiveOption)).Cast<ObjectiveOption>()"
                                            TextField="@(item =>BriefingRoomGUITools.GetEnumName(item))"
                                            DescriptionField="@(item => BriefingRoomGUITools.GetEnumDescription(item))"
                                            ValueField="@(item =>item)"
                                            SelectedValues="subTask.Options"
                                            TItem="ObjectiveOption"
                                            TItemOutput="ObjectiveOption">
                                        </CheckBoxList>
                                    }
                                    <button type="button" class="btn btn-secondary form-control" @onclick="() => objectiveUtil.AddSubTask(objective)">+</button>
                                </div>
                            }
                        }
                    </div>
                    break;
                case "options":
                    <div id="options" class="generator-block">
                        <h3>@BriefingRoom.Translate("Options")</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("MissionFeatures")</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                GroupingField="@(item => item.Category.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.MissionFeatures"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("MissionOptions")</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.OptionsMission).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.OptionsMission"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("RealismOptions")</h4>
                            <CheckBoxList
                                Data="Enum.GetValues(typeof(RealismOption)).Cast<RealismOption>()"
                                TextField="@(item => BriefingRoomGUITools.GetEnumName(item))"
                                
                                ValueField="@(item =>item)"
                                SelectedValues="Template.OptionsRealism"
                                TItem="RealismOption"
                                TItemOutput="RealismOption">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("UnitMods")</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.DCSMod).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.Mods"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                    </div>
                    break;
                case "situation":
                    <div id="situation" class="generator-block">
                        <h3>@BriefingRoom.Translate("Situation")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                            <h4>Enemies</h4>
                                <InputEnum Label=@BriefingRoom.Translate("CombatProficiency") @bind-Value="Template.SituationEnemySkill" EnumType="AmountR"/>
                                <InputEnum Label=@BriefingRoom.Translate("AntiAircraftStrength") @bind-Value="Template.SituationEnemyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label=@BriefingRoom.Translate("CombatAirPatrols") @bind-Value="Template.SituationEnemyAirForce" EnumType="AmountNR"/>
                            </div>
                            <div class="flex-block">
                                <h4>Friendlies</h4>
                                <InputEnum Label=@BriefingRoom.Translate("CombatProficiency") @bind-Value="Template.SituationFriendlySkill" EnumType="AmountR"/>
                                <InputEnum Label=@BriefingRoom.Translate("AntiAircraftStrength") @bind-Value="Template.SituationFriendlyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label=@BriefingRoom.Translate("CombatAirPatrols") @bind-Value="Template.SituationFriendlyAirForce" EnumType="AmountNR"/>
                            </div>
                        </div>
                    </div>
                    break;
                case "combined-arms":
                    <div id="combined-arms" class="generator-block">
                        <h3>@BriefingRoom.Translate("CombinedArms")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                                <h4>@BriefingRoom.Translate("Blue")</h4>
                                <label>@BriefingRoom.Translate("Commanders")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderBlue"></InputNumber>
                                <label>@BriefingRoom.Translate("JTAC")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACBlue"></InputNumber>
                            </div>
                            <div class="flex-block">
                                <h4>@BriefingRoom.Translate("Red")</h4>
                                <label>@BriefingRoom.Translate("Commanders")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderRed"></InputNumber>
                                <label>@BriefingRoom.Translate("JTAC")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACRed"></InputNumber>
                            </div>  
                        </div>
                    </div>
                    break;
                case "flight-groups":
                    <div id="flight-groups" class="generator-block">
                        <h3>@BriefingRoom.Translate("PlayerFlightGroups")</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.PlayerFlightGroups)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(flightGroupUtil.Tab == value ? "active" : "") @(value.Hostile ? "hostile" : "")" aria-current="page"
                            @onclick='() => flightGroupUtil.SetFlightGroupTab(value)'>
                                       @value.Alias: @BuilderUtils.GetAircraftDisplayName(@value.Aircraft) x @value.Count
                                        @if (Template.PlayerFlightGroups.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  flightGroupUtil.RemoveFlightGroup(value, Template)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="() => flightGroupUtil.AddFlightGroup(Template)">+</a>
                            </li>
                        </ul>

                        @foreach (var flight in Template.PlayerFlightGroups)
                        {
                            if (flightGroupUtil.Tab == flight)
                            {
                                <div class="flight-group  @(flight.Hostile ? "hostile" : "")">
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Aircraft")</label>
                                            <BlazoredTypeahead SearchMethod="BuilderUtils.SearchAircraft" @bind-Value="flight.Aircraft"
                                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                                                MaximumSuggestions="1000">
                                                <SelectedTemplate Context="aircraftId">
                                                    @BuilderUtils.GetAircraftDisplayName(@aircraftId)
                                                </SelectedTemplate>
                                                <ResultTemplate Context="aircraft">
                                                    @aircraft.Name.Get()
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Count")</label>
                                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Payload")</label>
                                            <select class="form-control selectpicker" @bind=flight.Payload>
                                                @foreach (var item in BriefingRoom.GetAircraftPayloads(flight.Aircraft))
                                                {
                                                    <option value="@item">@BriefingRoom.FormatPayload(item)</option> // Blazor needs to know what values it binds to!
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-secondary row-button" @onclick="() => flightGroupUtil.CloneFlightGroup(flight, Template)" title="Clone Flight Group"><span class="oi oi-layers"></span></button>
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("StartingSetup") @bind-Value="flight.StartLocation" EnumType="PlayerStartLocation"/>
                                        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("StartOn") @bind-Value="flight.Carrier" DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt=@BriefingRoom.Translate("Airbase")/>
                                        @if(!String.IsNullOrEmpty(flight.Carrier))
                                        {
                                            <button type="button" class="btn btn-secondary row-button" @onclick='() => RenderHintMap(flight.Carrier.StartsWith("FOB") ? flight.Carrier : $"CARRIER_{flight.Carrier}")' title="@BriefingRoom.Translate("LocationHint")"><span class="oi oi-globe"></span></button>
                                        }
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="flex-block form-group">
                                            <label>@BriefingRoom.Translate("Livery")</label>
                                            <select class="form-control selectpicker" @bind=flight.Livery>
                                            @foreach (var item in BriefingRoom.GetAircraftLiveries(flight.Aircraft))
                                            {
                                                <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                            }
                                            </select>
                                        </div>
                                        <div class="flex-block form-group">
                                            <label>@BriefingRoom.Translate("Country")</label>
                                            <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCountry" @bind-Value="flight.Country"
                                                EnableDropDown="true" DisableClear="true" MaximumSuggestions="1000">
                                                <SelectedTemplate Context="country">
                                                    @country
                                                </SelectedTemplate>
                                                <ResultTemplate Context="country">
                                                    @country
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                    </div>
                                    <div class="accordion" id="accordionExample">
                                         <div class="accordion-item">
                                            <h2 class="accordion-header" id="headingTwo">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                                @BriefingRoom.Translate("Advanced")
                                            </button>
                                            </h2>
                                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;@BriefingRoom.Translate("AdvancedWarning")</p>
                                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                                        <div class="form-group flex-block">
                                                            <label>@BriefingRoom.Translate("OverrideFreqency")</label>
                                                            <input class="form-control" type="text" @bind="flight.OverrideRadioFrequency" placeholder=@BriefingRoom.Translate("OverrideFreqencyPlaceHolder") />
                                                        </div>
                                                        <InputEnum ClassString="flex-block" Label="RadioBand" @bind-Value="flight.OverrideRadioBand" EnumType="RadioModulation"/>
                                                    </div>
                                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                                     <div class="flex-block form-group">
                                                        <label>@BriefingRoom.Translate("OverrideCallsignName")</label>
                                                        <select class="form-control selectpicker" @bind=flight.OverrideCallsignName>
                                                            <option value=""></option>
                                                            @foreach (var item in BriefingRoom.GetAircraftCallsigns(flight.Aircraft))
                                                            {
                                                                <option value="@item">@item.Split(":")[1]</option> // Blazor needs to know what values it binds to!
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="form-group flex-block">
                                                        <label>@BriefingRoom.Translate("OverrideCallsignNumber")</label>
                                                        <input class="form-control" type="number" min="1" max="9" @bind="flight.OverrideCallsignNumber" placeholder="x" />
                                                    </div> 
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex-block form-group">
                                        <label class="checkbox-wrapper">
                                            <input type="checkbox" checked=@flight.AIWingmen
                                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                                <span>@BriefingRoom.Translate("AIWingmen")</span>
                                        </label>
                                        @if(Template.PlayerFlightGroups.First() != flight)
                                        {
                                            <label class="checkbox-wrapper">
                                                <input type="checkbox" checked=@flight.Hostile
                                                    @onchange="eventArgs => { flight.Hostile = (bool)eventArgs.Value; StateHasChanged();}" />
                                                    <span>@BriefingRoom.Translate("Hostile")</span>
                                            </label>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        <hr/>
                         <div id="flight-groups" class="generator-block">
                        <h3>@BriefingRoom.Translate("StrikePackages")</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.AircraftPackages)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(packageTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetPackageTab(value)'>
                                        @value.Alias
                                            <a class="delete-flight" @onclick="() =>  RemovePackage(value)">x</a>
                                    </a>
                                </li>
                            }
                            @if(Template.PlayerFlightGroups.Count(x => !x.Hostile) > 1)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" @onclick="AddPackage">+</a>
                                </li>
                            } else {
                            <li class="nav-item">
                                <p>@BriefingRoom.Translate("StrikePackageWarning")</p>
                            </li>
                            }
                        </ul>

                        @foreach (var package in Template.AircraftPackages)
                        {
                            if (packageTab == package)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <label>@BriefingRoom.Translate("Objectives")</label>
                                         <CheckBoxList
                                            Data="Template.Objectives"
                                            TextField="@(item =>item.Alias + ": " + item.Task + "-" + item.Target)"
                                            ValueField="@(item =>Template.Objectives.IndexOf(item))"
                                            SelectedValues="package.ObjectiveIndexes"
                                            TItem="MissionTemplateObjective" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <div class="form-group">
                                        <label>@BriefingRoom.Translate("FlightGroups")</label>
                                        <CheckBoxList
                                            Data="GetAvailableFlightGroups(package)"
                                            TextField="@(item =>item.Alias + ": " + item.Aircraft + " x " + item.Count)"
                                            ValueField="@(item =>Template.PlayerFlightGroups.IndexOf(item))"
                                            SelectedValues="package.FlightGroupIndexes"
                                            TItem="MissionTemplateFlightGroup" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <InputDataBase 
                                        Label=@BriefingRoom.Translate("StartingAirbase")
                                        @bind-Value="package.StartingAirbase"
                                        DataBaseType="DatabaseEntryType.Airbase"
                                        Grouping="@Template.ContextTheater"
                                        EmptOpt=@BriefingRoom.Translate("Random")
                                        CustomOpt=@(BriefingRoom.Translate("HomeBase")+",home")
                                        />
                                </div>
                            }
                        }
                    </div>
                    </div>
                    break;
            }
        </EditForm>
        <button id="hint-open-map-button" class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom" @onclick='() => RenderHintMap("")'><span class="oi oi-globe"></span> @BriefingRoom.Translate("ViewLocationHint")</button>
        <div class="offcanvas offcanvas-bottom h-auto" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasBottomLabel">@BriefingRoom.Translate("LocationHint")</h5>
                <button id="hint-close-map-button" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
                <div class="offcanvas-body">
                    <p>@BriefingRoom.Translate("HintUsageP1")&nbsp;<span class="oi oi-globe"></span>&nbsp;@BriefingRoom.Translate("HintUsageP2")</p>
                    <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;@BriefingRoom.Translate("HintNote")</p>
                    <div id="hintMap"></div>
                </div>
            </div>
        <div class=bottom-bar>
            <LoggerAll logs="MainLayout.logs"/>
        </div>
    </div>
    }
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="MainLayout.logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadMission"  PrimaryLabel=@BriefingRoom.Translate("Mission") PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel=@BriefingRoom.Translate("Briefing") SecondaryIcon="browser"
              TertiaryFunc="ClearMission"  TertiaryLabel="" TertiaryIcon="x"
            />
            @if(!showGenerator){
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = true"><span class="oi oi-fullscreen-exit"></span></button>
                <button class="btn btn-primary form-control"  @onclick="() => GenerateMissionAsync()">@BriefingRoom.Translate("Generate")</button>
            }
            else {
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = false"><span class="oi oi-fullscreen-enter"></span></button>
            }
            <div>
                <div id="map"></div>
                <p>@BriefingRoom.Translate("MapWarning")</p>
            </div>
            <div>@((MarkupString)mission.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string tempateMessage;

    private bool showGenerator = true;

    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

    private bool spinner = false;

    private FlightGroupUtils flightGroupUtil = new FlightGroupUtils();
    private ObjectiveUtils objectiveUtil = new ObjectiveUtils(false);

    protected override void OnInitialized()
    {
        Template = new MissionTemplate();
        Template.Objectives[0].Preset = "Custom";
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
        objectiveUtil.Tab = Template.Objectives[0];
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t=> clearTemplateMessage());
    }

    private void clearTemplateMessage()
    {
     tempateMessage = "";
     StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            Template = await BuilderUtils.LoadTemplateFile(e, Template);
            await JSRuntime.InvokeVoidAsync("SetHintPositions", BuilderUtils.LoadHints(ref Template), Template.ContextTheater);
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();    
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private async Task SaveTemplate()
    {
        try {
            await AddPositionHints();
            var fileBytes = Template.GetIniBytes();
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes);
            tempateMessage = "Template Saved"; 
            clearTemplateMessageDelay();
        } catch (Exception ex) {
             Console.WriteLine(ex);
        }
    }

    private async Task ClearTemplate()
    {
        tempateMessage = "Template Reset"; 
        Template.Clear();
        Template.Objectives[0].Preset = "Custom";
        await JSRuntime.InvokeVoidAsync("SetHintPositions", new Dictionary<string, double[]>(),  Template.ContextTheater);
        clearTemplateMessageDelay();
        StateHasChanged();
    }

    private async Task AddPositionHints()
    {
        var result = await JSRuntime.InvokeAsync<Dictionary<string, double[]>>("GetHintPoints", Template.ContextTheater);
        BuilderUtils.SetTemplateHints(result, ref Template);
    }

    private async void GenerateMissionAsync()
    {
        try {
            spinner = true;
            StateHasChanged();
            mission = null;
            errorMessage = "";
            await AddPositionHints();
            mission = await Layout.briefingRoom.GenerateMissionAsync(Template);
            StateHasChanged();
            await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", mission.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearMission()
    {
        mission = null;
        showGenerator = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        try { 
            byte[] zipBytes = mission.SaveToMizBytes(Template);
            if (zipBytes == null) return; // Something went wrong during the .miz export
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{(Template.Mods.Contains("DSMC")? "DSMC_": "")}{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes); 
        }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    async Task DownloadBriefing()
    {
        try { 
            byte[] zipBytes = Encoding.UTF8.GetBytes(mission.Briefing.GetBriefingAsHTML());
            if (zipBytes == null) return; // Something went wrong during the .miz export
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html", "text/html", zipBytes); }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    private async Task RenderHintMap(string hintKey)
    {
        await JSRuntime.InvokeVoidAsync("RenderHintMap", Template.ContextTheater, hintKey);

    }

    private string tab = "context-&-enviroment";
    private Dictionary<string, string> tabs = new Dictionary<string, string>{
        { "context-&-enviroment", "ContextAndEnviroment" },
        { "flight-groups", "FlightGroups" },
        { "objectives", "Missions" },
        { "situation", "Situation" },
        { "combined-arms", "CombinedArms" },
        { "options", "Options" },
    };
    private void SetTab(string var)
    {
        tab = var;
    }

    private MissionTemplatePackage packageTab;
    private void SetPackageTab(MissionTemplatePackage var)
    {
        packageTab = var;
    }

    private void AddPackage()
    {
        MissionTemplatePackage package = new();
        packageTab = package;
        package.Alias = BriefingRoom.GetAlias(Template.AircraftPackages.Count);
        Template.AircraftPackages.Add(package);
    }

    private void RemovePackage(MissionTemplatePackage package)
    {
        Template.AircraftPackages.Remove(package);
        if (Template.AircraftPackages.Count == 1)
        {
            packageTab = Template.AircraftPackages[0];
        }
    }

    private List<MissionTemplateFlightGroup> GetAvailableFlightGroups(MissionTemplatePackage package)
    {
        var restOfPackages = Template.AircraftPackages.Where(x => x != package);
        return Template.PlayerFlightGroups.Where((v,i) => !v.Hostile && (package.FlightGroupIndexes.Contains(i) || !restOfPackages.Any(y => y.FlightGroupIndexes.Contains(i)))).ToList();
    }
}