@page "/FullBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
<LoadingSpinner ON="spinner"/>
<div class="title-bar">
    <h1>Full Mission Generator</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".brt" />
</div>
<div class="generator-group">
    <div class="generator-form">
        <div>
            @if(!string.IsNullOrEmpty(tempateMessage)){
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
                }
            @if(!string.IsNullOrEmpty(errorMessage)){
            <div class="alert alert-danger" role="alert">
                Error: @errorMessage
            </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMissionAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
                <button class="btn btn-primary form-control" type="submit">Generate</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value)'>@textInfo.ToTitleCase(value).Replace("-", " ")</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context-&-enviroment":
                    <div id="context" class="generator-block">
                        <h3>Context</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>Blue coalition</label>
                                <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionBlue" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                            <div class="form-group flex-block">
                                    <label>Red coalition</label>
                                <BlazoredTypeahead SearchMethod="SearchCoalition" @bind-Value="Template.ContextCoalitionRed" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                        </div>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputDataBase ClassString="flex-block" Label="Theater" @bind-Value="Template.ContextTheater" DataBaseType="DatabaseEntryType.Theater"/>
                            <InputDataBase ClassString="flex-block" Label="Situation" @bind-Value="Template.ContextSituation" DataBaseType="DatabaseEntryType.Situation" Grouping="@Template.ContextTheater" EmptOpt="Random"/>
                        </div>
                        <InputDataBase Label="Home airbase" @bind-Value="Template.FlightPlanTheaterStartingAirbase" DataBaseType="DatabaseEntryType.Airbase" Grouping="@Template.ContextTheater" EmptOpt="Random"/>
                        <InputEnum Label="Time period" @bind-Value="Template.ContextDecade" EnumType="Decade"/>
                        <InputEnum Label="Player Side" @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition"/>
                    </div>
                    <hr />
                    <div id="environment" class="generator-block">
                        <h3>Environment</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputEnum ClassString="flex-block" Label="Season" @bind-Value="Template.EnvironmentSeason" EnumType="Season"/>
                            <InputEnum ClassString="flex-block" Label="Time of day" @bind-Value="Template.EnvironmentTimeOfDay" EnumType="TimeOfDay"/>
                        </div>
                       
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputDataBase ClassString="flex-block" Label="Weather preset" @bind-Value="Template.EnvironmentWeatherPreset" DataBaseType="DatabaseEntryType.WeatherPreset" EmptOpt="Random"/>
                            <InputEnum ClassString="flex-block" Label="Wind" @bind-Value="Template.EnvironmentWind" EnumType="Wind"/>
                        </div>
                    </div>
                    break;
                case "objectives":
                    <div id="objectives" class="generator-block">
                        <h3>Objectives</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>Objective distance (zero means random)</label>
                                <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistance"></InputNumber>
                            </div>
                            <div class="form-group flex-block">
                                <label>Objective seperation (zero means random)</label>
                                <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeperation"></InputNumber>
                            </div>
                        </div>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.Objectives)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(ObjectiveTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetObjectiveTab(value)'>
                                        @value.Alias
                                        @if (Template.Objectives.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  RemoveObjective(value)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="AddObjective">+</a>
                            </li>
                        </ul>

                        @foreach (var objective in Template.Objectives)
                        {
                            if (ObjectiveTab == objective)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <button type="button" class="btn btn-secondary float-right" @onclick="() => CloneObjective(objective)"  title="Clone Objective"><span class="oi oi-layers"></span></button>
                                        <h4>Features</h4>
                                        <CheckBoxList
                                            Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.ObjectiveFeature).ToList()"
                                            TextField="@(item =>item.Name)"
                                            DescriptionField="@(item =>item.Description)"
                                            ValueField="@(item =>item.ID)"
                                            SelectedValues="objective.Features"
                                            TItem="DatabaseEntryInfo"
                                            TItemOutput="string">
                                        </CheckBoxList>
                                    </div>
                                    
                                    <h4>Tasks</h4>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <InputDataBase ClassString="flex-block" Label="Task" @bind-Value="objective.Task" DataBaseType="DatabaseEntryType.ObjectiveTask"/>
                                        <InputDataBase ClassString="flex-block" Label="Target" @bind-Value="objective.Target" DataBaseType="DatabaseEntryType.ObjectiveTarget" Grouping="@objective.Task"/>
                                        <InputDataBase ClassString="flex-block" Label="Target behavior" @bind-Value="objective.TargetBehavior" DataBaseType="DatabaseEntryType.ObjectiveTargetBehavior" Grouping="@objective.Target"/>
                                        <InputEnum ClassString="flex-block" Label="Target count" @bind-Value="objective.TargetCount" EnumType="Amount"/>
                                    </div>
                                    <div class="form-group">
                                        <CheckBoxList
                                            Data="Enum.GetValues(typeof(ObjectiveOption)).Cast<ObjectiveOption>()"
                                            TextField="@(item =>BriefingRoomGUITools.GetEnumName(item))"
                                            DescriptionField="@(item => BriefingRoomGUITools.GetEnumDescription(item))"
                                            ValueField="@(item =>item)"
                                            SelectedValues="objective.Options"
                                            TItem="ObjectiveOption"
                                            TItemOutput="ObjectiveOption">
                                        </CheckBoxList>
                                    </div>
                                    @foreach (var subTask in objective.SubTasks)
                                    {
                                    <hr/>
                                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                                            <InputDataBase ClassString="flex-block" Label="Task" @bind-Value="subTask.Task" DataBaseType="DatabaseEntryType.ObjectiveTask"/>
                                            <InputDataBase ClassString="flex-block" Label="Target" @bind-Value="subTask.Target" DataBaseType="DatabaseEntryType.ObjectiveTarget" Grouping="@subTask.Task"/>
                                            <InputDataBase ClassString="flex-block" Label="Target behavior" @bind-Value="subTask.TargetBehavior" DataBaseType="DatabaseEntryType.ObjectiveTargetBehavior"/>
                                            <InputEnum ClassString="flex-block" Label="Target count" @bind-Value="subTask.TargetCount" EnumType="Amount"/>
                                            <button type="button" class="btn btn-secondary row-button" @onclick="() => RemoveSubTask(objective, subTask)">x</button>
                                        </div>
                                        <CheckBoxList
                                            Data="Enum.GetValues(typeof(ObjectiveOption)).Cast<ObjectiveOption>()"
                                            TextField="@(item =>BriefingRoomGUITools.GetEnumName(item))"
                                            DescriptionField="@(item => BriefingRoomGUITools.GetEnumDescription(item))"
                                            ValueField="@(item =>item)"
                                            SelectedValues="subTask.Options"
                                            TItem="ObjectiveOption"
                                            TItemOutput="ObjectiveOption">
                                        </CheckBoxList>
                                    }
                                    <button type="button" class="btn btn-secondary form-control" @onclick="() => AddSubTask(objective)">+</button>
                                </div>
                            }
                        }
                    </div>
                    break;
                case "options":
                    <div id="options" class="generator-block">
                        <h3>Options</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                        <div class="form-group">
                            <h4>Mission features</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                                TextField="@(item =>item.Name)"
                                DescriptionField="@(item => item.Description)"
                                GroupingField="@(item => item.Category)"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.MissionFeatures"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Mission options</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.OptionsMission).ToList()"
                                TextField="@(item =>item.Name)"
                                DescriptionField="@(item => item.Description)"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.OptionsMission"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Realism options</h4>
                            <CheckBoxList
                                Data="Enum.GetValues(typeof(RealismOption)).Cast<RealismOption>()"
                                TextField="@(item => BriefingRoomGUITools.GetEnumName(item))"
                                ValueField="@(item =>item)"
                                SelectedValues="Template.OptionsRealism"
                                TItem="RealismOption"
                                TItemOutput="RealismOption">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>Unit mods</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.DCSMod).ToList()"
                                TextField="@(item =>item.Name)"
                                DescriptionField="@(item => item.Description)"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.Mods"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                    </div>
                    break;
                case "situation":
                    <div id="situation" class="generator-block">
                        <h3>Situation</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                            <h4>Enemies</h4>
                                <InputEnum Label="Combat proficiency" @bind-Value="Template.SituationEnemySkill" EnumType="AmountNR"/>
                                <InputEnum Label="Anti-aircraft strength" @bind-Value="Template.SituationEnemyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label="Combat air patrols" @bind-Value="Template.SituationEnemyAirForce" EnumType="AmountNR"/>
                            </div>
                            <div class="flex-block">
                                <h4>Friendlies</h4>
                                <InputEnum Label="Combat proficiency" @bind-Value="Template.SituationFriendlySkill" EnumType="AmountNR"/>
                                <InputEnum Label="Anti-aircraft strength" @bind-Value="Template.SituationFriendlyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label="Combat air patrols" @bind-Value="Template.SituationFriendlyAirForce" EnumType="AmountNR"/>
                            </div>
                        </div>
                    </div>
                    break;
                case "combined-arms":
                    <div id="combined-arms" class="generator-block">
                        <h3>Combined Arms</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                                <h4>Blue</h4>
                                <label>Commanders</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderBlue"></InputNumber>
                                <label>JTACS</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACBlue"></InputNumber>
                            </div>
                            <div class="flex-block">
                                <h4>Red</h4>
                                <label>Commanders</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderRed"></InputNumber>
                                <label>JTACS</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACRed"></InputNumber>
                            </div>  
                        </div>
                    </div>
                    break;
                case "flight-groups":
                    <div id="flight-groups" class="generator-block">
                        <h3>Player flight groups</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.PlayerFlightGroups)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(flightGroupTab == value ? "active" : "") @(value.Hostile ? "hostile" : "")" aria-current="page"
                            @onclick='() => SetFlightGroupTab(value)'>
                                       @value.Alias: @GetAircraftDisplayName(@value.Aircraft) x @value.Count
                                        @if (Template.PlayerFlightGroups.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  RemoveFlightGroup(value)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="AddFlightGroup">+</a>
                            </li>
                        </ul>

                        @foreach (var flight in Template.PlayerFlightGroups)
                        {
                            if (flightGroupTab == flight)
                            {
                                <div class="flight-group  @(flight.Hostile ? "hostile" : "")">
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="form-group flex-block">
                                            <label>Aircraft</label>
                                            <BlazoredTypeahead SearchMethod="SearchAircraft" @bind-Value="flight.Aircraft"
                                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                                                MaximumSuggestions="1000">
                                                <SelectedTemplate Context="aircraftId">
                                                    @GetAircraftDisplayName(@aircraftId)
                                                </SelectedTemplate>
                                                <ResultTemplate Context="aircraft">
                                                    @aircraft.Name
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>Count</label>
                                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>Payload</label>
                                            <select class="form-control selectpicker" @bind=flight.Payload>
                                                @foreach (var item in GetAircraftPayloads(flight.Aircraft))
                                                {
                                                    <option value="@item">@BriefingRoom.FormatPayload(item)</option> // Blazor needs to know what values it binds to!
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-secondary row-button" @onclick="() => CloneFlightGroup(flight)" title="Clone Flight Group"><span class="oi oi-layers"></span></button>
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <InputEnum ClassString="flex-block" Label="Starting Setup" @bind-Value="flight.StartLocation" EnumType="PlayerStartLocation"/>
                                        <InputDataBase ClassString="flex-block" Label="Carrier" @bind-Value="flight.Carrier" DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt="N/A"/>
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="flex-block form-group">
                                            <label>Livery</label>
                                            <select class="form-control selectpicker" @bind=flight.Livery>
                                            @foreach (var item in GetLiveries(flight.Aircraft))
                                            {
                                                <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                            }
                                            </select>
                                        </div>
                                        <div class="flex-block form-group">
                                            <label>Country</label>
                                            <BlazoredTypeahead SearchMethod="SearchCountry" @bind-Value="flight.Country"
                                                EnableDropDown="true" DisableClear="true" MaximumSuggestions="1000">
                                                <SelectedTemplate Context="country">
                                                    @country
                                                </SelectedTemplate>
                                                <ResultTemplate Context="country">
                                                    @country
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                    </div>
                                    <div class="accordion" id="accordionExample">
                                         <div class="accordion-item">
                                            <h2 class="accordion-header" id="headingTwo">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                                Advanced
                                            </button>
                                            </h2>
                                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;Its possible to generate corrupted missions by setting these values. Use at your own risk as values aren't validated.</p>
                                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                                        <div class="form-group flex-block">
                                                            <label>Override Freqency</label>
                                                            <input class="form-control" type="text" @bind="flight.OverrideRadioFrequency" placeholder="Generate (xxx or xxx.x)" />
                                                        </div>
                                                        <InputEnum ClassString="flex-block" Label="RadioBand" @bind-Value="flight.OverrideRadioBand" EnumType="RadioModulation"/>
                                                    </div>
                                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                                     <div class="flex-block form-group">
                                                        <label>Override Callsign Name</label>
                                                        <select class="form-control selectpicker" @bind=flight.OverrideCallsignName>
                                                            <option value=""></option>
                                                            @foreach (var item in GetCallsigns(flight.Aircraft))
                                                            {
                                                                <option value="@item">@item.Split(":")[1]</option> // Blazor needs to know what values it binds to!
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="form-group flex-block">
                                                        <label>Override Callsign Number</label>
                                                        <input class="form-control" type="number" min="1" max="9" @bind="flight.OverrideCallsignNumber" placeholder="x" />
                                                    </div> 
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex-block form-group">
                                        <label class="checkbox-wrapper">
                                            <input type="checkbox" checked=@flight.AIWingmen
                                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                                <span>AI Wingmen</span>
                                        </label>
                                        @if(Template.PlayerFlightGroups.First() != flight)
                                        {
                                            <label class="checkbox-wrapper">
                                                <input type="checkbox" checked=@flight.Hostile
                                                    @onchange="eventArgs => { flight.Hostile = (bool)eventArgs.Value; StateHasChanged();}" />
                                                    <span>Hostile</span>
                                            </label>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        <hr/>
                         <div id="flight-groups" class="generator-block">
                        <h3>Strike Packages</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.AircraftPackages)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(packageTab == value ? "active" : "")" aria-current="page"
                            @onclick='() => SetPackageTab(value)'>
                                        @value.Alias
                                            <a class="delete-flight" @onclick="() =>  RemovePackage(value)">x</a>
                                    </a>
                                </li>
                            }
                            @if(Template.PlayerFlightGroups.Count(x => !x.Hostile) > 1)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" @onclick="AddPackage">+</a>
                                </li>
                            } else {
                            <li class="nav-item">
                                <p>Must have more than one flight group to use Strike Packaging</p>
                            </li>
                            }
                        </ul>

                        @foreach (var package in Template.AircraftPackages)
                        {
                            if (packageTab == package)
                            {
                                <div class="flight-group">
                                    <div class="form-group">
                                        <label>Objectives</label>
                                         <CheckBoxList
                                            Data="Template.Objectives"
                                            TextField="@(item =>item.Alias + ": " + item.Task + "-" + item.Target)"
                                            ValueField="@(item =>Template.Objectives.IndexOf(item))"
                                            SelectedValues="package.ObjectiveIndexes"
                                            TItem="MissionTemplateObjective" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <div class="form-group">
                                        <label>Flight Groups</label>
                                        <CheckBoxList
                                            Data="GetAvailableFlightGroups(package)"
                                            TextField="@(item =>item.Alias + ": " + item.Aircraft + " x " + item.Count)"
                                            ValueField="@(item =>Template.PlayerFlightGroups.IndexOf(item))"
                                            SelectedValues="package.FlightGroupIndexes"
                                            TItem="MissionTemplateFlightGroup" TItemOutput="int">
                                        </CheckBoxList>
                                    </div>
                                    <InputDataBase 
                                        Label="Starting Airbase"
                                        @bind-Value="package.StartingAirbase"
                                        DataBaseType="DatabaseEntryType.Airbase"
                                        Grouping="@Template.ContextTheater"
                                        EmptOpt="Random"
                                        CustomOpt="Home Base,home"
                                        />
                                </div>
                            }
                        }
                    </div>
                    </div>
                    break;
            }
        </EditForm>
        <div class=bottom-bar>
            <LoggerAll logs="logs"/>
        </div>
    </div>
    @* TODO: COMPONENT CANDIDATE *@
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadMission"  PrimaryLabel="Mission" PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel="Briefing" SecondaryIcon="browser"
              TertiaryFunc="ClearMission"  TertiaryLabel="" TertiaryIcon="x"
            />
            <div>
                <canvas height="360" width="640" id="canvas"></canvas>  
            </div>
            <div>@((MarkupString)mission.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {
    private BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom(WriteToDebugLog);
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string tempateMessage;
    public static List<Tuple<LogMessageErrorLevel, string>> logs = new List<Tuple<LogMessageErrorLevel, string>>();

    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

    private bool spinner = false;

    protected override void OnInitialized()
    {
        Template = new MissionTemplate();
        flightGroupTab = Template.PlayerFlightGroups[0];
        ObjectiveTab = Template.Objectives[0];
    }

    
    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(errorLevel, message));
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t=> clearTemplateMessage());
    }

    private void clearTemplateMessage()
    {
     tempateMessage = "";
     StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());
            var data = await reader.ReadToEndAsync();
            Template.LoadFromString(data); 
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        }
    }

    private async Task SaveTemplate()
    {
        try { 
            var fileBytes = Template.GetIniBytes();
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes);
            tempateMessage = "Template Saved"; 
            clearTemplateMessageDelay();
        } catch (Exception ex) {
             Console.WriteLine(ex);
        }
    }

    private Task ClearTemplate()
    {
        tempateMessage = "Template Reset"; 
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void GenerateMissionAsync()
    {
        try {
            spinner = true;
            StateHasChanged();
            mission = null;
            errorMessage = "";
            mission = await briefingRoom.GenerateMissionAsync(Template);
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("RenderMap", mission.GetMapData());
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearMission()
    {
        mission = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        try { 
            byte[] zipBytes = mission.SaveToMizBytes();
            if (zipBytes == null) return; // Something went wrong during the .miz export
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes); 
        }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    async Task DownloadBriefing()
    {
        try { 
            byte[] zipBytes = Encoding.UTF8.GetBytes(mission.Briefing.GetBriefingAsHTML());
            if (zipBytes == null) return; // Something went wrong during the .miz export
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html", "text/html", zipBytes); }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    private string tab = "context-&-enviroment";
    private List<string> tabs = new List<string>{
        "context-&-enviroment",
        "flight-groups",
        "objectives",
        "situation",
        "combined-arms",
        "options",
    };
    private void SetTab(string var)
    {
        tab = var;
    }

    private MissionTemplateFlightGroup flightGroupTab;
    private void SetFlightGroupTab(MissionTemplateFlightGroup var)
    {
        flightGroupTab = var;
    }

    private void AddFlightGroup()
    {
        MissionTemplateFlightGroup newflight = new();
        newflight.Alias = BriefingRoom.GetAlias(Template.PlayerFlightGroups.Count);
        Template.PlayerFlightGroups.Add(newflight);
        flightGroupTab = newflight;
    }

    private void CloneFlightGroup(MissionTemplateFlightGroup flight) {
        MissionTemplateFlightGroup newflight = new(){
            Aircraft = flight.Aircraft,
            AIWingmen = flight.AIWingmen,
            Carrier = flight.Carrier,
            Count = flight.Count,
            Country = flight.Country,
            Payload = flight.Payload,
            StartLocation = flight.StartLocation,
            Livery = flight.Livery
        };
        newflight.Alias = BriefingRoom.GetAlias(Template.PlayerFlightGroups.Count);
        Template.PlayerFlightGroups.Add(newflight);
        flightGroupTab = newflight;
    }

    private void RemoveFlightGroup(MissionTemplateFlightGroup flight)
    {
        Template.PlayerFlightGroups.Remove(flight);
        if (Template.PlayerFlightGroups.Count == 1)
        {
            flightGroupTab = Template.PlayerFlightGroups[0];
        }
    }


    private MissionTemplatePackage packageTab;
    private void SetPackageTab(MissionTemplatePackage var)
    {
        packageTab = var;
    }

    private void AddPackage()
    {
        MissionTemplatePackage package = new();
        packageTab = package;
        package.Alias = BriefingRoom.GetAlias(Template.AircraftPackages.Count);
        Template.AircraftPackages.Add(package);
    }

    private void RemovePackage(MissionTemplatePackage package)
    {
        Template.AircraftPackages.Remove(package);
        if (Template.AircraftPackages.Count == 1)
        {
            packageTab = Template.AircraftPackages[0];
        }
    }

    private List<MissionTemplateFlightGroup> GetAvailableFlightGroups(MissionTemplatePackage package)
    {
        var restOfPackages = Template.AircraftPackages.Where(x => x != package);
        return Template.PlayerFlightGroups.Where((v,i) => !v.Hostile && (package.FlightGroupIndexes.Contains(i) || !restOfPackages.Any(y => y.FlightGroupIndexes.Contains(i)))).ToList();
    }

    private MissionTemplateObjective ObjectiveTab;
    private void SetObjectiveTab(MissionTemplateObjective var)
    {
        ObjectiveTab = var;
    }

    private void AddObjective()
    {
        MissionTemplateObjective obj = new();
        ObjectiveTab = obj;
        obj.Alias = BriefingRoom.GetAlias(Template.Objectives.Count);
        obj.Preset = "Custom";
        Template.Objectives.Add(obj);
    }

    private void CloneObjective(MissionTemplateObjective obj) {
        MissionTemplateObjective newObj = new(){
            Target = obj.Target,
            TargetBehavior = obj.TargetBehavior,
            TargetCount = obj.TargetCount,
            Task = obj.Task,
            Options = obj.Options,
            Features = obj.Features,
            SubTasks = obj.SubTasks
        };
        newObj.Alias = BriefingRoom.GetAlias(Template.Objectives.Count);
        obj.Preset = "Custom";
        Template.Objectives.Add(newObj);
        ObjectiveTab = newObj;
    }

    private void RemoveObjective(MissionTemplateObjective obj)
    {
        Template.Objectives.Remove(obj);
        if(ObjectiveTab == obj)
            ObjectiveTab = Template.Objectives.First();
    }

    private void AddSubTask(MissionTemplateObjective obj)
    {
        obj.SubTasks.Add(new MissionTemplateSubTask());
    }

    private void RemoveSubTask(MissionTemplateObjective obj, MissionTemplateSubTask subTsk)
    {
        obj.SubTasks.Remove(subTsk);
    }

    private List<string> GetLiveries(string aircraftId) =>
        BriefingRoom.GetAircraftLiveries(aircraftId);
    
    private List<string> GetCallsigns(string aircraftId) =>
        BriefingRoom.GetAircraftCallsigns(aircraftId);

    private List<string> GetAircraftPayloads(string aircraftId) =>
        BriefingRoom.GetAircraftPayloads(aircraftId);

    private async Task<IEnumerable<Country>> SearchCountry(string searchText) =>
    await Typeahead.SearchEnum<Country>(searchText);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchAircraft(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.UnitFlyableAircraft, searchText);
    private string GetAircraftDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.UnitFlyableAircraft, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchObjectiveType(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.ObjectiveTask, searchText);
    private string GetObjectiveTypeDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTask, id);

    private string GetObjectiveTargetDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.ObjectiveTarget, id);

    private async Task<IEnumerable<DatabaseEntryInfo>> SearchCoalition(string searchText) =>
    await Typeahead.SearchDB(DatabaseEntryType.Coalition, searchText);

    private string GetCoalitionDisplayName(string id) =>
    Typeahead.GetDBDisplayName(DatabaseEntryType.Coalition, id);
}