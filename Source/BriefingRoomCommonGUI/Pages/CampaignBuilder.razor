@page "/CampaignBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
@using Polly
@using System.IO.Compression
<LoadingSpinner ON="spinner"/>
<div class="title-bar">
    <h1>@BriefingRoom.Translate("CampaignGenerator")</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".cbrt,.zip" />
</div>
<div class="generator-group">
    @if(showGenerator) {
    <div class="generator-form">
        <div>
            @if(!string.IsNullOrEmpty(tempateMessage)){
                <div class="alert alert-info" role="info">
                    @tempateMessage
                </div>
                }
            @if(!string.IsNullOrEmpty(errorMessage)){
            <div class="alert alert-danger" role="alert">
                @BriefingRoom.Translate("Error"): @errorMessage
            </div>
            }

            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateCampaign">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <button class="btn btn-primary form-control" type="submit">@BriefingRoom.Translate("Generate")</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value.Key ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value.Key)'>@BriefingRoom.Translate(value.Value)</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context-&-enviroment":
                    <div id="context" class="generator-block">
                        <h3>@BriefingRoom.Translate("Context")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>@BriefingRoom.Translate("BlueCoalition")</label>
                                <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionBlue" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @BuilderUtils.GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name.Get()
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                            <div class="form-group flex-block">
                                    <label>@BriefingRoom.Translate("RedCoalition")</label>
                                <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionRed" 
                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true" MaximumSuggestions="1000">
                                    <SelectedTemplate Context="coalitionId">
                                        @BuilderUtils.GetCoalitionDisplayName(@coalitionId)
                                    </SelectedTemplate>
                                    <ResultTemplate Context="coalition">
                                        @coalition.Name.Get()
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                        </div>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Theater") @bind-Value="Template.ContextTheater" DataBaseType="DatabaseEntryType.Theater"/>
                            <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("Situation") @bind-Value="Template.ContextSituation" DataBaseType="DatabaseEntryType.Situation" Grouping="@Template.ContextTheater" EmptOpt=@BriefingRoom.Translate("Random")/>
                        </div>
                        <InputDataBase Label=@BriefingRoom.Translate("HomeAirbase") @bind-Value="Template.FlightPlanTheaterStartingAirbase" DataBaseType="DatabaseEntryType.Airbase" Grouping="@Template.ContextTheater" EmptOpt=@BriefingRoom.Translate("Random")/>
                        <InputEnum Label=@BriefingRoom.Translate("TimePeriod") @bind-Value="Template.ContextDecade" EnumType="Decade"/>
                        <InputEnum Label=@BriefingRoom.Translate("PlayerSide") @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition"/>
                    </div>
                    <hr />
                    <div id="environment" class="generator-block">
                        <h3>Environment</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("BadWeatherChance") @bind-Value="Template.EnvironmentBadWeatherChance" EnumType="Amount"/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("NightMissionChance") @bind-Value="Template.EnvironmentNightMissionChance" EnumType="Amount"/>
                        </div>
                    </div>
                    break;
                case "missions":
                    <div id="missions" class="generator-block">
                        <h3>@BriefingRoom.Translate("Missions")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="form-group flex-block">
                                <label>@BriefingRoom.Translate("MissionCount")</label>
                                <InputNumber class="form-control" @bind-Value="Template.MissionsCount"></InputNumber>
                            </div>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("MissionDifficultyVariation") @bind-Value="Template.MissionsDifficultyVariation" EnumType="CampaignDifficultyVariation"/>
                        </div>
                        <div class="form-group">
                            <label>@BriefingRoom.Translate("MissionFeatures")</label>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                GroupingField="@(item => item.Category.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.MissionFeatures"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("Objectives")</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.ObjectivePreset).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.MissionsObjectives"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="flex-block">
                                <h6>@BriefingRoom.Translate("ObjectiveDistance")</h6>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Min")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMin">
                                    </InputNumber>
                                </div>
                                <div class="min-max">
                                    <label>@BriefingRoom.Translate("Max")</label>
                                    <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMax">
                                    </InputNumber>
                                </div>
                            </div>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("ObjectivesCount") @bind-Value="Template.MissionsObjectiveCount" EnumType="Amount"/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("TargetCount") @bind-Value="Template.MissionTargetCount" EnumType="Amount"/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("ObjectiveVariationDistance") @bind-Value="Template.MissionsObjectiveVariationDistance" EnumType="Amount"/>
                            <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("AirbaseVariationDistance") @bind-Value="Template.MissionsAirbaseVariationDistance" EnumType="Amount"/>
                        </div>
                    </div>
                    break;
                case "options":
                    <div id="options" class="generator-block">
                        <h3>@BriefingRoom.Translate("Options")</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("MissionOptions")</h4>
                            <CheckBoxList 
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.OptionsMission).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.OptionsMission"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("RealismOptions")</h4>
                            <CheckBoxList Data="Enum.GetValues(typeof(RealismOption)).Cast<RealismOption>()"
                        TextField="@((item)=>BriefingRoomGUITools.GetEnumName(item))" ValueField="@((item)=>item)"
                        SelectedValues="Template.OptionsRealism" TItem="RealismOption" TItemOutput="RealismOption"
                        DescriptionField="@(item => BriefingRoomGUITools.GetEnumDescription(item))"
                        >
                            </CheckBoxList>
                        </div>
                        <div class="form-group">
                            <h4>@BriefingRoom.Translate("UnitMods")</h4>
                            <CheckBoxList
                                Data="BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.DCSMod).ToList()"
                                TextField="@(item =>item.Name.Get())"
                                DescriptionField="@(item => item.Description.Get())"
                                ValueField="@(item =>item.ID)"
                                SelectedValues="Template.Mods"
                                TItem="DatabaseEntryInfo"
                                TItemOutput="string">
                            </CheckBoxList>
                        </div>
                    </div>
                    break;
                case "situation":
                     <div id="situation" class="generator-block">
                        <h3>@BriefingRoom.Translate("Situation")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                           <h4>Enemies</h4>
                                <InputEnum Label=@BriefingRoom.Translate("CombatProficiency") @bind-Value="Template.SituationEnemySkill" EnumType="AmountR"/>
                                <InputEnum Label=@BriefingRoom.Translate("AntiAircraftStrength") @bind-Value="Template.SituationEnemyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label=@BriefingRoom.Translate("CombatAirPatrols") @bind-Value="Template.SituationEnemyAirForce" EnumType="AmountNR"/>
                            </div>
                            <div class="flex-block">
                                <h4>Friendlies</h4>
                                <InputEnum Label=@BriefingRoom.Translate("CombatProficiency") @bind-Value="Template.SituationFriendlySkill" EnumType="AmountR"/>
                                <InputEnum Label=@BriefingRoom.Translate("AntiAircraftStrength") @bind-Value="Template.SituationFriendlyAirDefense" EnumType="AmountNR"/>
                                <InputEnum Label=@BriefingRoom.Translate("CombatAirPatrols") @bind-Value="Template.SituationFriendlyAirForce" EnumType="AmountNR"/>
                            </div>
                        </div>
                    </div>
                    break;
                case "combined-arms":
                    <div id="combined-arms" class="generator-block">
                        <h3>@BriefingRoom.Translate("CombinedArms")</h3>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                            <div class="flex-block">
                                <h4>@BriefingRoom.Translate("Blue")</h4>
                                <label>@BriefingRoom.Translate("Commanders")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderBlue"></InputNumber>
                                <label>@BriefingRoom.Translate("JTAC")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACBlue"></InputNumber>
                            </div>
                            <div class="flex-block">
                                <h4>@BriefingRoom.Translate("Red")</h4>
                                <label>@BriefingRoom.Translate("Commanders")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsCommanderRed"></InputNumber>
                                <label>@BriefingRoom.Translate("JTAC")</label>
                                <InputNumber class="form-control" @bind-Value="Template.CombinedArmsJTACRed"></InputNumber>
                            </div>  
                        </div>
                    </div>
                    break;
                case "flight-groups":
                    <div id="flight-groups" class="generator-block">
                        <h3>@BriefingRoom.Translate("PlayerFlightGroups")</h3>
                        <ul class="nav nav-tabs">
                            @foreach (var value in Template.PlayerFlightGroups)
                            {
                                <li class="nav-item">
                                    <a class="nav-link @(flightGroupUtil.Tab == value ? "active" : "") @(value.Hostile ? "hostile" : "")" aria-current="page"
                            @onclick='() => flightGroupUtil.SetFlightGroupTab(value)'>
                                       @value.Alias: @BuilderUtils.GetAircraftDisplayName(@value.Aircraft) x @value.Count
                                        @if (Template.PlayerFlightGroups.Count > 1)
                                        {
                                            <a class="delete-flight" @onclick="() =>  flightGroupUtil.RemoveFlightGroup(value, Template)">x</a>
                                        }
                                    </a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link" @onclick="() => flightGroupUtil.AddFlightGroup(Template)">+</a>
                            </li>
                        </ul>

                        @foreach (var flight in Template.PlayerFlightGroups)
                        {
                            if (flightGroupUtil.Tab == flight)
                            {
                                <div class="flight-group  @(flight.Hostile ? "hostile" : "")">
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Aircraft")</label>
                                            <BlazoredTypeahead SearchMethod="BuilderUtils.SearchAircraft" @bind-Value="flight.Aircraft"
                                                EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                                                MaximumSuggestions="1000">
                                                <SelectedTemplate Context="aircraftId">
                                                    @BuilderUtils.GetAircraftDisplayName(@aircraftId)
                                                </SelectedTemplate>
                                                <ResultTemplate Context="aircraft">
                                                    @aircraft.Name.Get()
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Count")</label>
                                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                                        </div>
                                        <div class="form-group flex-block">
                                            <label>@BriefingRoom.Translate("Payload")</label>
                                            <select class="form-control selectpicker" @bind=flight.Payload>
                                                <option value="default">default</option>
                                                @foreach (var item in BriefingRoom.GetAircraftPayloads(flight.Aircraft))
                                                {
                                                    <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-secondary row-button" @onclick="() => flightGroupUtil.CloneFlightGroup(flight, Template)" title="Clone Flight Group"><span class="oi oi-layers"></span></button>
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <InputEnum ClassString="flex-block" Label=@BriefingRoom.Translate("StartingSetup") @bind-Value="flight.StartLocation" EnumType="PlayerStartLocation"/>
                                        <InputDataBase ClassString="flex-block" Label=@BriefingRoom.Translate("StartOn") @bind-Value="flight.Carrier" DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt="N/A"/>
                                    </div>
                                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                                        <div class="flex-block form-group">
                                            <label>@BriefingRoom.Translate("Livery")</label>
                                            <select class="form-control selectpicker" @bind=flight.Livery>
                                                <option value="default">default</option>
                                            @foreach (var item in BriefingRoom.GetAircraftLiveries(flight.Aircraft))
                                            {
                                                <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                            }
                                            </select>
                                        </div>
                                        <div class="flex-block form-group">
                                            <label>@BriefingRoom.Translate("Country")</label>
                                            <BlazoredTypeahead SearchMethod="BuilderUtils.SearchCountry" @bind-Value="flight.Country"
                                                EnableDropDown="true" DisableClear="true" MaximumSuggestions="1000">
                                                <SelectedTemplate Context="country">
                                                    @country
                                                </SelectedTemplate>
                                                <ResultTemplate Context="country">
                                                    @country
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </div>
                                    </div>
                                    <div class="flex-block form-group">
                                        <label class="checkbox-wrapper">
                                            <input type="checkbox" checked=@flight.AIWingmen
                                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                                <span>@BriefingRoom.Translate("AIWingmen")</span>
                                        </label>
                                        @if(Template.PlayerFlightGroups.First() != flight)
                                        {
                                            <label class="checkbox-wrapper">
                                                <input type="checkbox" checked=@flight.Hostile
                                                    @onchange="eventArgs => { flight.Hostile = (bool)eventArgs.Value; StateHasChanged();}" />
                                                    <span>@BriefingRoom.Translate("Hostile")</span>
                                            </label>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    break;
            }
        </EditForm>
        <div class=bottom-bar>
            <LoggerAll logs="MainLayout.logs"/>
        </div>
    </div>
    }
    @if (campaign != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="MainLayout.logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadCampaign"  PrimaryLabel=@BriefingRoom.Translate("Campaign") PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel=@BriefingRoom.Translate("Briefings") SecondaryIcon="browser"
              TertiaryFunc="ClearCampaign"  TertiaryLabel="" TertiaryIcon="x"
            />
             @if(!showGenerator){
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = true"><span class="oi oi-fullscreen-exit"></span></button>
                <button class="btn btn-primary form-control"  @onclick="() => GenerateCampaign()">@BriefingRoom.Translate("Generate")</button>
            }
            else {
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = false"><span class="oi oi-fullscreen-enter"></span></button>
            }
            <h3>@campaign.Name (@campaign.MissionCount)</h3>
            <ul class="nav nav-tabs">
                @foreach (var mission in campaign.Missions)
                {
                    <li class="nav-item">
                        <a class="nav-link @(missionTab == mission ? "active" : "")" aria-current="page"
                            @onclick='() => SetMissionTab(mission)'>@(campaign.Missions.IndexOf(mission) + 1)</a>
                    </li>
                }
            </ul>
            <div>
                <div id="map"></div>
                <p>@BriefingRoom.Translate("MapWarning")</p> 
            </div>
            <div>@((MarkupString)missionTab.Briefing.GetBriefingAsHTML(false))</div>
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    private CampaignTemplate Template;
    private DCSCampaign campaign;
    private string errorMessage;

    private string tempateMessage;

    private bool showGenerator = true;


    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.cbrt";

    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

    private bool spinner = false;

    private FlightGroupUtils flightGroupUtil = new FlightGroupUtils();

    protected override void OnInitialized()
    {
        Template = new CampaignTemplate();
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
    }

    private void clearTemplateMessageDelay()
    {
        Task.Delay(1000).ContinueWith(t=> clearTemplateMessage());
    }

    private Task clearTemplateMessage()
    {
        tempateMessage = "";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            var targetFile = e.File.OpenReadStream(BriefingRoom.MAXFILESIZE);
            var data = "";
            if(e.File.Name.EndsWith(".zip"))
            {
                using var ms = new MemoryStream();
                await targetFile.CopyToAsync(ms);
                using var zip = new ZipArchive(ms);
                if (!zip.Entries.Any(entry => entry.Name == "template.cbrt"))
                    throw new Exception("Template File not found within campaign");
                targetFile.Close();
                using var reader = new StreamReader(zip.Entries.First(entry => entry.Name == "template.cbrt").Open());
                data = await reader.ReadToEndAsync();
            } else {
                using var reader = new StreamReader(targetFile);
                data = await reader.ReadToEndAsync();
            }
            Template.LoadFromString(data); 
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = $"Failed to Load Template (Template may no longer be compatable): {ex.Message}";
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.cbrt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        tempateMessage = "Template Saved"; 
        clearTemplateMessageDelay();
    }

    private Task ClearTemplate()
    {
        tempateMessage = "Template Reset"; 
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void GenerateCampaign()
    {
        try {
            spinner = true;
            StateHasChanged();
            campaign = null;
            errorMessage = "";
            campaign = await Layout.briefingRoom.GenerateCampaignAsync(Template);
            missionTab = campaign.Missions.First();
            StateHasChanged();
            await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", missionTab.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearCampaign()
    {
        campaign = null;
        showGenerator = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadCampaign()
    {

        byte[] zipBytes = campaign.ExportToCompressedByteArray(Template);
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {campaign.Name}.zip", "application/octet-stream", zipBytes); }
        catch (Exception) { }
    }

    async Task DownloadBriefing()
    {
            byte[] zipBytes = campaign.ExportBriefingsToCompressedByteArray(Template);
            if (zipBytes == null) return; // Something went wrong during the .miz export

            try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {campaign.Name} - Briefings.zip", "text/html", zipBytes); }
            catch (Exception) { }
    }

    private string tab = "context-&-enviroment";
    private Dictionary<string, string> tabs = new Dictionary<string, string>{
        { "context-&-enviroment", "ContextAndEnviroment" },
        { "flight-groups", "FlightGroups" },
        { "missions", "Missions" },
        { "situation", "Situation" },
        { "combined-arms", "CombinedArms" },
        { "options", "Options" }
    };
    private void SetTab(string var)
    {
        tab = var;
    }

    private DCSMission missionTab;
    private void SetMissionTab(DCSMission var)
    {
        missionTab = var;
        Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", missionTab.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
    }
}