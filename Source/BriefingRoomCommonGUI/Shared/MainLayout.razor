@inherits LayoutComponentBase
@using BriefingRoom4DCS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<CascadingValue Value="this">
    <div class="page @((darkmode? "darkMode" : ""))">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <div class="form-group language-selector">
                    <label>@BriefingRoom.Translate("Language") <a href="https://poeditor.com/join/project/MJES2FW5lh"
                            class="img-link-tiny" target="_blank"><img
                                src="_content/BriefingRoomCommonGUI/img/poeditor.svg" alt="poeditor.com" /></a></label>
                    <select class="form-control" value=@BriefingRoom.LanguageDB.Language
                        @onchange="eventArgs => SetLanguage((string)eventArgs.Value)">
                        @foreach (var key in BriefingRoom.AvailableLanguagesMap.Keys)
                        {
                            <option value="@key">@BriefingRoom.AvailableLanguagesMap[key]</option>
                        }
                    </select>

                </div>
                @if (BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <div>&nbsp;<span class="oi oi-info"></span>&nbsp;@BriefingRoom.Translate("DockerWarn")&nbsp;</div>
                }
                <a href="@BriefingRoom.WEBSITE_URL" target="_blank">@BriefingRoom.Translate("About")</a>
                <a href="@BriefingRoom.DISCORD_URL" target="_blank" class="img-link"><img alt="Discord"
                        src="_content/BriefingRoomCommonGUI/img/discord-icon-svgrepo-com.svg"></a>
                <a href="@BriefingRoom.REPO_URL" target="_blank" class="img-link"><img alt="Github"
                        src="_content/BriefingRoomCommonGUI/img/github-mark@((darkmode? "-white" : "")).svg"></a>
                <a href="https://www.patreon.com/bePatron?u=99514930" target="_blank" class="img-link"><img
                        alt="Become a Patron!" src="_content/BriefingRoomCommonGUI/img/patreon-icon.png"></a>
                @if (BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <div class="btn-container"><a title="Support me on ko-fi.com" class="kofi-button"
                            style="background-color:#29abe0;" href="https://ko-fi.com/V7V0IZI9N" target="_blank"> <span
                                class="kofitext"><img src="https://storage.ko-fi.com/cdn/cup-border.png"
                                    alt="Ko-fi donations"
                                    class="kofiimg">@BriefingRoom.Translate("KoFiContributeBeg")</span></a></div>
                }
                else
                {
                    <a href="https://ko-fi.com/V7V0IZI9N" target="_blank" class="img-link"><img alt="Support us with Ko-fi"
                            src="_content/BriefingRoomCommonGUI/img/Kofi-icon.png"></a>
                }
                <label class="bulb">
                    <input type="checkbox" checked=@darkmode
                        @onchange="eventArgs => SetDarkMode((bool)eventArgs.Value)" />
                    <span class="oi oi-@((darkmode? "sun" : "moon"))"></span>
                </label>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>
</CascadingValue>


@code {
    public BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom(WriteToDebugLog);
    public bool darkmode = false;

    public static List<Tuple<DateTime, LogMessageErrorLevel, string>> logs = new List<Tuple<DateTime, LogMessageErrorLevel,
    string>>();

    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(DateTime.Now, errorLevel, message));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            darkmode = true;
            BriefingRoom.LanguageDB.Language = "en";
            try
            {
                darkmode = await localStorage.GetItemAsync<bool>("DCSUseDarkMode");
                BriefingRoom.LanguageDB.Language = await localStorage.GetItemAsync<string>("DCSLanguage");
                if (string.IsNullOrEmpty(BriefingRoom.LanguageDB.Language))
                    BriefingRoom.LanguageDB.Language = "en";
            }
            catch (System.Exception)
            {
            }
            StateHasChanged();
        }
    }


    private async Task SetDarkMode(bool darkModeOn)
    {
        darkmode = darkModeOn;
        StateHasChanged();
        try
        {
            await localStorage.SetItemAsync("DCSUseDarkMode", darkModeOn);
        }
        catch (System.Exception)
        {
        }
    }

    private async Task SetLanguage(string langKey)
    {
        BriefingRoom.LanguageDB.Language = langKey;
        StateHasChanged();
        try
        {
            await localStorage.SetItemAsync("DCSLanguage", langKey);
        }
        catch (System.Exception)
        {
        }
    }
}
