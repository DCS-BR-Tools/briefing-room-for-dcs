@inherits LayoutComponentBase
@using BriefingRoom4DCS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<CascadingValue Value="this">
    <div class="page @((darkmode? "darkMode" : ""))">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <div class="form-group language-selector">
                    <label>@BriefingRoom.Translate("Language")</label>
                    <select class="form-control" @bind=@BriefingRoom.LanguageDB.Language>
                        @foreach (var key in BriefingRoom.AvailableLanguagesMap.Keys)
                        {
                            <option value="@key">@BriefingRoom.AvailableLanguagesMap[key]</option>
                        }
                    </select>
                </div>
                @if (BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <div>&nbsp;<span class="oi oi-info"></span>&nbsp;@BriefingRoom.Translate("DockerWarn")&nbsp;</div>
                }
                <a href="@BriefingRoom.WEBSITE_URL" target="_blank">@BriefingRoom.Translate("About")</a>
                <a href="@BriefingRoom.REPO_URL" target="_blank">GitHub</a>
                <label class="bulb">
                    <input type="checkbox" checked=@darkmode
                        @onchange="eventArgs => SetDarkMode((bool)eventArgs.Value)" />
                    <span class="oi oi-@((darkmode? "sun" : "moon"))"></span>
                </label>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>
</CascadingValue>


@code {
    public BriefingRoom4DCS.BriefingRoom briefingRoom = new BriefingRoom4DCS.BriefingRoom(WriteToDebugLog);
    public bool darkmode = false;

    public static List<Tuple<LogMessageErrorLevel, string>> logs = new List<Tuple<LogMessageErrorLevel, string>>();

    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(errorLevel, message));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            darkmode = await localStorage.GetItemAsync<bool>("DCSUseDarkMode");
            StateHasChanged();
        }
    }


    private async Task SetDarkMode(bool darkModeOn)
    {
        darkmode = darkModeOn;
        StateHasChanged();
        await localStorage.SetItemAsync("DCSUseDarkMode", darkModeOn);
    }
}
