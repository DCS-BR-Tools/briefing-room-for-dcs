<div class="form-group inputEnum @ClassString">
    <label>@Label</label>
    <InputSelect 
    class="form-control" 
    Value="Value"
    ValueExpression="@(()=>Value)" 
    ValueChanged="@((string s) => ValueChangedChild(s))">
        @if(!String.IsNullOrEmpty(EmptOpt))
        {
            <option value="">@EmptOpt</option>
        }
        @foreach (var value in GetData())
        {
            <option value="@value.ID">
                @if (HasDescription)
                {
                    @value.GetNameAndDescription(": ", true)
                } else {
                    @value.Name
                }
            </option>
        }
    </InputSelect>
</div>
  
@code {

    [Parameter]
    public string EmptOpt { get; set; } = "";

    [Parameter]
    public bool HasDescription { get; set; } = false;

    [Parameter]
    public string ClassString { get; set; } = "";

    [Parameter]
    public string Label { get; set; } 

    [Parameter]
    public DatabaseEntryType DataBaseType { get; set; }

    [Parameter]
    public string Grouping { get; set; }

    [Parameter]
    public string Value { get; set; } 

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; } 
  
    private async Task ValueChangedChild(string value)
    {
        await ValueChanged.InvokeAsync(value);
    } 

    private DatabaseEntryInfo[] GetData()
    {
        if(String.IsNullOrEmpty(Grouping))
            return BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DataBaseType, Grouping);
        return BriefingRoom4DCS.BriefingRoom.GetDatabaseEntriesInfo(DataBaseType);
    }
}