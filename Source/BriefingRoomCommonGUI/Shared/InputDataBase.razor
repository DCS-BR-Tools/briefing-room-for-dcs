@inject BriefingRoom4DCS.BriefingRoom briefingRoom

<div class="form-group inputEnum @ClassString">
    <label>@Label</label>
    <InputSelect class="form-control" Value="Value" ValueExpression="@(()=>Value)"
        ValueChanged="@((string s) => ValueChangedChild(s))" disabled="@IsDisabled">
        @if (!String.IsNullOrEmpty(CustomOpt))
        {
            <option value="@CustomOpt.Split(",")[1]">@CustomOpt.Split(",")[0]</option>
        }
        @if (!String.IsNullOrEmpty(EmptOpt))
        {
            <option value="">@EmptOpt</option>
        }
        @foreach (var value in GetData())
        {
            <option value="@value.ID">
                @if (HasDescription)
                {
                    @value.GetNameAndDescription(briefingRoom.LanguageKey, ": ", true)
                }
                else
                {
                    @value.Name.Get(briefingRoom.LanguageKey)
                }
            </option>
        }
    </InputSelect>
</div>

@code {
    [Parameter]
    public string EmptOpt { get; set; } = "";

    [Parameter]
    public string CustomOpt { get; set; } = "";

    [Parameter]
    public bool HasDescription { get; set; } = false;

    [Parameter]
    public string ClassString { get; set; } = "";

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public DatabaseEntryType DataBaseType { get; set; }

    [Parameter]
    public string Grouping { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }


    private async Task ValueChangedChild(string value)
    {
        await ValueChanged.InvokeAsync(value);
    }

    private DatabaseEntryInfo[] GetData()
    {
        DatabaseEntryInfo[] litems;
        if (!String.IsNullOrEmpty(Grouping))
            litems = briefingRoom.GetDatabaseEntriesInfo(DataBaseType, Grouping);
        else
            litems = briefingRoom.GetDatabaseEntriesInfo(DataBaseType);
        if(litems.Count() == 0)
            return litems;
        if (!litems.Select(x => x.ID).Contains(Value) && Value != "" && (string.IsNullOrEmpty(CustomOpt) || Value !=
        CustomOpt.Split(",")[1]))
            if (!string.IsNullOrEmpty(CustomOpt))
                _ = ValueChangedChild(CustomOpt.Split(",")[1]);
            else if (!string.IsNullOrEmpty(EmptOpt))
                _ = ValueChangedChild("");
            else
                _ = ValueChangedChild(litems[0].ID);
        return litems;
    }
}