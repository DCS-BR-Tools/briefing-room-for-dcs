@typeparam TItem
@typeparam TItemOutput
<div style=@Style class="checkboxList">
    @if (Data != null)
    {
        foreach (var group in Data.GroupBy(x => GroupingField?.Invoke(x)))
        {
            <div class="checkboxList-group">
                @if (!String.IsNullOrEmpty(group.Key))
                {
                    <div class="checkboxList-group-title">@group.Key:</div>
                }
                <div class="checkboxList-group-options">
                    @foreach (var item in group)
                    {
                        var Text = TextField?.Invoke(item);
                        var Description = DescriptionField?.Invoke(item);
                        var Grouping = GroupingField?.Invoke(item);
                        var Value = ValueField?.Invoke(item);
                        bool Checked = false;
                        if (SelectedValues.Contains((TItemOutput)Value))
                        {
                            Checked = true;
                        }
                        <label class="checkboxList-item">
                            <input type="checkbox" checked=@Checked
                                @onchange="eventArgs => { CheckboxClicked((TItemOutput)Value, eventArgs.Value); }" />
                            <span>
                                @Text
                                @if (!String.IsNullOrEmpty(Description))
                                {
                                    <span class="description">@Description</span>
                                }
                            </span>
                        </label>
                    }
                </div>
            </div>

        }
    }
    @ChildContent
</div>

@code {
    //Data for the Checkbox
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; }

    [Parameter] public Func<TItem, string> DescriptionField { get; set; }

    [Parameter] public Func<TItem, string> GroupingField { get; set; }
    // The Value which checkbox will return when checked
    [Parameter] public Func<TItem, object> ValueField { get; set; }
    // CSS Style for the Checkbox container
    [Parameter] public string Style { get; set; }
    // Any childd content for the control (if needed)
    [Parameter] public RenderFragment ChildContent { get; set; }
    // The array which contains the list of selected checkboxs
    [Parameter] public List<TItemOutput> SelectedValues { get; set; }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(TItemOutput aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}