@inject IJSRuntime JSRuntime
@if (showLogs)
{
    <div class="alert alert-secondary" role="info">
        <div>
            <div class="btn-group" role="group">
                <button class="btn btn-secondary" @onclick="() => ToggleShowLogs()"><span
                        class="oi oi-bug"></span>@logs.Count()</button>
                <button class="btn btn-secondary" @onclick="() => ClearLogs()"><span
                        class="oi oi-reload"></span>@BriefingRoom.Translate("Clear")</button>
                <button class="btn btn-secondary" @onclick="() => CopyLogs()">
                    <span class="oi oi-clipboard"></span>@BriefingRoom.Translate("Copy")</button>
                <button class="btn btn-secondary" @onclick="() => ReloadDatabase()">
                    <span class="oi oi-reload"></span>@BriefingRoom.Translate("ReloadDatabase")</button>
            </div>
            @foreach (var log in logs)
            {
                <p>@log.Item1: @log.Item2</p>
            }
        </div>
    </div>
}
else
{
    <button class="btn btn-secondary btn-sm" @onclick="() => ToggleShowLogs()"><span class="oi oi-bug"></span></button>
}

@code {
    [Parameter] public List<Tuple<LogMessageErrorLevel, string>> logs { get; set; }
    private bool showLogs = false;

    public void ClearLogs()
    {
        logs.Clear();
        showLogs = false;
        StateHasChanged();
    }

    private void ToggleShowLogs()
    {
        showLogs = !showLogs;
    }

    private void CopyLogs()
    {
        JSRuntime.InvokeVoidAsync("CopyLogs", logs.Select(x => $"{x.Item1}: {x.Item2}").ToList());
    }

    private void ReloadDatabase()
    {
        BriefingRoom.ReloadDatabase();
    }
}