@page "/QuickBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BriefingRoom4DCS.BriefingRoom briefingRoom
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using System.Text
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.IO
@using Polly
@using System.IO.Compression
@using System.Diagnostics
<LoadingSpinner ON="spinner"/>
<LateDownloadButton Download="LateDownload" ON="showLateDownloadButton" />  
<div class="title-bar">
    <h1>@briefingRoom.Translate("QuickGenerator")</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".brt,.miz" />
</div>
<div class="generator-group">
    @if(showGenerator) {
    <div class="generator-form">
        <div>
            @if (!string.IsNullOrEmpty(tempateMessage))
            {
                <div class="alert alert-info notification" role="info">
                    @tempateMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @briefingRoom.Translate("Error"): @errorMessage
                </div>
            }
            <hr>
        </div>
        <EditForm Model="Template" OnSubmit="GenerateMissionAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <button class="btn btn-primary form-control" type="submit">@briefingRoom.Translate("Generate")</button>
            <p class="custom-warning">@((MarkupString)briefingRoom.Translate("QuickBuilderWarning"))</p>
            <hr />
            <div id="context" class="generator-block">
                <h3>@briefingRoom.Translate("Context")</h3>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <div class="form-group flex-block">
                        <label>@briefingRoom.Translate("BlueCoalition")</label>
                        <BlazoredTypeahead SearchMethod="builderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionBlue"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                 @builderUtils.GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name.Get(briefingRoom.LanguageKey)
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="form-group flex-block">
                        <label>@briefingRoom.Translate("RedCoalition")</label>
                        <BlazoredTypeahead SearchMethod="builderUtils.SearchCoalition" @bind-Value="Template.ContextCoalitionRed"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                            <SelectedTemplate Context="coalitionId">
                                 @builderUtils.GetCoalitionDisplayName(@coalitionId)
                            </SelectedTemplate>
                            <ResultTemplate Context="coalition">
                                @coalition.Name.Get(briefingRoom.LanguageKey)
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <InputEnum ClassString="flex-block" Label=@briefingRoom.Translate("TimePeriod") @bind-Value="Template.ContextDecade"
                        EnumType="Decade" />
                </div>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <InputEnum ClassString="flex-block" Label=@briefingRoom.Translate("PlayerSide")
                        @bind-Value="Template.ContextPlayerCoalition" EnumType="Coalition" />
                    <InputDataBase ClassString="flex-block" Label=@briefingRoom.Translate("Theater") @bind-Value="Template.ContextTheater" DataBaseType="DatabaseEntryType.Theater" />
                    <InputDataBase ClassString="flex-block" Label=@briefingRoom.Translate("Situation") @bind-Value="Template.ContextSituation" Grouping="@Template.ContextTheater" DataBaseType="DatabaseEntryType.Situation" EmptOpt=@briefingRoom.Translate("Random") CustomOpt="None (Spawn Anywhere),None" />
                </div>
                <InputDataBase Label=@briefingRoom.Translate("HomeAirbase") @bind-Value="Template.FlightPlanTheaterStartingAirbase" DataBaseType="DatabaseEntryType.Airbase" Grouping="@Template.ContextTheater" EmptOpt=@briefingRoom.Translate("Random")/>
                <hr />
            </div>
            <div id="flight-groups" class="generator-block">
                <h3>@briefingRoom.Translate("PlayerFlightGroups")</h3>

                @foreach (var flight in Template.PlayerFlightGroups)
                {
                    <div class="generator-group flex-justify-spaced flex-margin-fix @(flight.Hostile ? "hostile" : "")">
                        <div class="form-group flex-block">
                            <label>@briefingRoom.Translate("Aircraft")</label>
                            <BlazoredTypeahead SearchMethod="builderUtils.SearchAircraft" @bind-Value="flight.Aircraft"
                            EnableDropDown="true" ConvertMethod="Typeahead.ConvertDB" DisableClear="true"
                            MaximumSuggestions="1000">
                                <SelectedTemplate Context="aircraftId">
                                     @builderUtils.GetAircraftDisplayName(@aircraftId)
                                </SelectedTemplate>
                                <ResultTemplate Context="aircraft">
                                    @aircraft.Name.Get(briefingRoom.LanguageKey)
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <div class="form-group flex-block">
                            <label>@briefingRoom.Translate("Count")</label>
                            <InputNumber class="form-control" @bind-Value="flight.Count"></InputNumber>
                        </div>
                        <InputEnum ClassString="flex-block" Label=@briefingRoom.Translate("StartingSetup") @bind-Value="flight.StartLocation" EnumType="PlayerStartLocation"/>
                        <InputDataBase ClassString="flex-block"  Label=@briefingRoom.Translate("StartOn") @bind-Value="flight.Carrier"
                        DataBaseType="DatabaseEntryType.UnitCarrier" EmptOpt=@briefingRoom.Translate("Airbase") />
                        @if(Template.CarrierHints.ContainsKey(flight.Carrier))
                        {
                            <p class="custom-warning flex-block form-group hint-remove-center">
                                <a @onclick="() => ClearCarrierHint(flight.Carrier)" >@briefingRoom.Translate("RemoveCarrierHint")</a>
                            </p>
                        }
                        <div class="form-group flex-block">
                            <label>@briefingRoom.Translate("Payload")</label>
                            <select class="form-control selectpicker" @bind=flight.Payload>
                                <option value="default">@briefingRoom.Translate("Default")</option>
                                <option value="EMPTY">@briefingRoom.Translate("Empty")</option>
                                @foreach (var item in BriefingRoom.GetAircraftPayloads(flight.Aircraft))
                                {
                                    <option value="@item">@item</option> // Blazor needs to know what values it binds to!
                                }
                            </select>
                        </div>
                        <div class="flex-block form-group">
                            <label>@briefingRoom.Translate("Livery")</label>
                            <select class="form-control selectpicker" @bind=flight.Livery>
                                <option value="default">@briefingRoom.Translate("Default")</option>
                                @foreach (var item in BriefingRoom.GetAircraftLiveries(flight.Aircraft))
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>
                        <div class="form-group flex-block">
                            <label class="checkbox-wrapper row-checkbox">
                                <input type="checkbox" checked=@flight.AIWingmen
                                @onchange="eventArgs => { flight.AIWingmen = (bool)eventArgs.Value; StateHasChanged();}" />
                                <span>@briefingRoom.Translate("AIWingmen")</span>
                            </label>
                             @if(Template.PlayerFlightGroups.First() != flight)
                            {
                                <label class="checkbox-wrapper row-checkbox">
                                    <input type="checkbox" checked=@flight.Hostile
                                        @onchange="eventArgs => { flight.Hostile = (bool)eventArgs.Value; StateHasChanged();}" />
                                        <span>@briefingRoom.Translate("Hostile")</span>
                                </label>
                            }
                        </div>
                        <div class="form-group flex-box">
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => flightGroupUtil.CloneFlightGroup(flight, Template)"  title="Clone Flight Group"><span class="oi oi-layers"></span></button>
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => flightGroupUtil.RemoveFlightGroup(flight, Template)"><span class="oi oi-x"></span></button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-secondary" @onclick="() => flightGroupUtil.AddFlightGroup(Template)">+</button>
                @if(Template.AircraftPackages.Count > 0)
                {
                   <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("QuickBuilderStikePackageWarning")
                   <a @onclick="() => ClearStrikePackages()" >@briefingRoom.Translate("RemoveStrikePackages")</a></p>  
                }
                <hr />
            </div>  
            <div class="generator-block">
                <h3>@briefingRoom.Translate("DynamicSpawn")</h3>
                <div>&nbsp;<span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("DynamicSpawnWarn")&nbsp;</div>
                <InputEnum ClassString="flex-block" @bind-Value="Template.AirbaseDynamicSpawn" EnumType="DsAirbase"/>
                <div class="flex-block form-group">
                     <label class="checkbox-wrapper">
                                    <input type="checkbox" checked=@Template.CarrierDynamicSpawn
                                        @onchange="eventArgs => { Template.CarrierDynamicSpawn = (bool)eventArgs.Value; StateHasChanged();}" />
                                        <span>@briefingRoom.Translate("CarrierDynamicSpawn")</span>
                                </label>
                        <label class="checkbox-wrapper">
                        <input type="checkbox" checked=@Template.DSAllowHotStart
                            @onchange="eventArgs => { Template.DSAllowHotStart = (bool)eventArgs.Value; StateHasChanged();}" />
                            <span>@briefingRoom.Translate("DSAllowHotStart")</span>
                    </label>
                </div>
            </div>
            <hr/>
            <div class="generator-block">
                <h3>@briefingRoom.Translate("DynamicCargo")</h3>
                <InputEnum ClassString="flex-block" @bind-Value="Template.AirbaseDynamicCargo" EnumType="DsAirbase"/>
                <div class="flex-block form-group">
                        <label class="checkbox-wrapper">
                        <input type="checkbox" checked=@Template.CarrierDynamicCargo
                            @onchange="eventArgs => { Template.CarrierDynamicCargo = (bool)eventArgs.Value; StateHasChanged();}" />
                            
                            <span>@briefingRoom.Translate("CarrierDynamicSpawn")</span>
                    </label>
                </div>
            </div>
            <hr/>
            <div id="objectives" class="generator-block">
                <h3>@briefingRoom.Translate("Objectives")</h3>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    <div class="flex-block">
                        <h6>@briefingRoom.Translate("ObjectiveDistance")</h6>
                        <div class="min-max">
                            <label>@briefingRoom.Translate("Min")</label>
                            <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMin">
                            </InputNumber>
                        </div>
                        <div class="min-max">
                            <label>@briefingRoom.Translate("Max")</label>
                            <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveDistanceMax">
                            </InputNumber>
                        </div>
                    </div>
                    <div class="flex-block">
                            <h6>@briefingRoom.Translate("ObjectiveSeperation")</h6>
                        <div class="min-max">
                            <label>@briefingRoom.Translate("Min")</label>
                            <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeparationMin">
                            </InputNumber>
                        </div>
                        <div class="min-max">
                            <label>@briefingRoom.Translate("Max")</label>
                            <InputNumber class="form-control" @bind-Value="Template.FlightPlanObjectiveSeparationMax">
                            </InputNumber>
                        </div>
                    </div>
                </div>
                <h4>@briefingRoom.Translate("Tasks")</h4>
                @foreach (var objective in Template.Objectives)
                {
                    <div class="generator-group flex-justify-spaced flex-margin-fix">
                        <InputDataBase ClassString="flex-block" Label=@briefingRoom.Translate("Objective") @bind-Value="objective.Preset" DataBaseType="DatabaseEntryType.ObjectivePreset" HasDescription />
                        <InputEnum ClassString="flex-block" Label=@briefingRoom.Translate("TargetCount") @bind-Value="objective.TargetCount" EnumType="Amount" />
                        <div class="form-group flex-box">
                            <button type="button" class="btn btn-secondary row-button" @onclick="() => objectiveUtil.AddSubTask(objective)">+ @briefingRoom.Translate("Nearby")</button>
                            <button type="button" class="btn btn-secondary row-button"
                            @onclick="() => objectiveUtil.CloneObjective(objective, ref Template)"  title="Clone Objective"><span class="oi oi-layers"></span></button>
                            @if (Template.Objectives.Count > 1)
                            {
                                <button type="button" class="btn btn-secondary row-button"
                                @onclick="() => objectiveUtil.RemoveObjective(objective, ref Template)"><span class="oi oi-x"></span></button>
                            }
                        </div>
                    </div>
                    @if(!objective.HasPreset){
                        <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("QuickBuilderCustomObjective"):
                            &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTask, @objective.Task).Value.Name.Get(briefingRoom.LanguageKey)
                            &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTarget, @objective.Target).Value.Name.Get(briefingRoom.LanguageKey)
                            &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTargetBehavior, @objective.TargetBehavior).Value.Name.Get(briefingRoom.LanguageKey)
                            &nbsp;@BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, objective.TargetCount)
                            &nbsp;@briefingRoom.Translate("Options"):
                                &nbsp;@string.Join(", ", @objective.Options.Select(x => BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, x)))<br/>
                            &nbsp;@briefingRoom.Translate("Features"):
                                &nbsp;@string.Join(", ", @objective.Features.Select(x => briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveFeature, x).Value.Name.Get(briefingRoom.LanguageKey)))
                        </p>
                    }
                    @if(objective.CoordinateHint[0] != 0 && objective.CoordinateHint[1] != 0)
                    {
                        <p class="custom-warning">
                            <a @onclick="() => objectiveUtil.ClearObjectiveHint(objective)" >@briefingRoom.Translate("RemoveHint")</a>
                        </p>
                    }


                    @if(objective.SubTasks.Count > 0)
                    {
                        <h5>@briefingRoom.Translate("Nearby")</h5>
                    }
                    @foreach (var subTask in objective.SubTasks)
                    {
                        <div class="generator-group flex-justify-spaced flex-margin-fix tabbed">
                            <InputDataBase ClassString="flex-block" Label=@briefingRoom.Translate("Objective") @bind-Value="subTask.Preset" DataBaseType="DatabaseEntryType.ObjectivePreset" HasDescription />
                            <InputEnum ClassString="flex-block" Label=@briefingRoom.Translate("TargetCount") @bind-Value="subTask.TargetCount" EnumType="Amount" />
                            <div class="form-group flex-box">
                                <button type="button" class="btn btn-secondary row-button"
                                @onclick="() => objectiveUtil.CloneObjectiveSubTask(subTask, objective)"  title="Clone Objective"><span class="oi oi-layers"></span></button>
                                <button type="button" class="btn btn-secondary row-button"
                                @onclick="() => objectiveUtil.RemoveSubTask(objective, subTask)"><span class="oi oi-x"></span></button>
                            </div>
                        </div>
                        @if(!subTask.HasPreset){
                            <p class="custom-warning tabbed"><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("QuickBuilderCustomObjective"):
                                &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTask, @subTask.Task).Value.Name.Get(briefingRoom.LanguageKey)
                                &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTarget, @subTask.Target).Value.Name.Get(briefingRoom.LanguageKey)
                                &nbsp;@briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.ObjectiveTargetBehavior, @subTask.TargetBehavior).Value.Name.Get(briefingRoom.LanguageKey)
                                &nbsp;@BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, subTask.TargetCount)
                                &nbsp;@briefingRoom.Translate("Options"):
                                    &nbsp;@string.Join(", ", @subTask.Options.Select(x => BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, x)))<br/>
                            </p>
                        }
                    }
                }
                <button type="button" class="btn btn-secondary form-control" @onclick="() => objectiveUtil.AddObjective(ref Template)">+ @briefingRoom.Translate("Task")</button> 
                <hr />
            </div>
            <div id="mission-features" class="generator-block row">
                <div class="col-6">
                    <h3>@briefingRoom.Translate("Options")</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                    <h3>@briefingRoom.Translate("MissionFeatures")</h3>
                    <CheckBoxList
                        Data="briefingRoom.GetDatabaseEntriesInfo(DatabaseEntryType.MissionFeature).ToList()"
                        TextField="@(item =>item.Name.Get(briefingRoom.LanguageKey))" DescriptionField="@(item => item.Description.Get(briefingRoom.LanguageKey))"
                        GroupingField="@(item => item.Category.Get(briefingRoom.LanguageKey))" ValueField="@(item =>item.ID)"
                        SelectedValues="Template.MissionFeatures" TItem="DatabaseEntryInfo" TItemOutput="string">
                    </CheckBoxList>
                </div>
                <div class="col-6">
                    <h5><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("InheritedSettings")</h5>
                    <p class="custom-warning">
                        @briefingRoom.Translate("InheritedSettingsText")<br/>
                        <b>@briefingRoom.Translate("Weather")</b>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                           <div>
                               @briefingRoom.Translate("Season"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.EnvironmentSeason)<br/>
                               @briefingRoom.Translate("Weather"): @(string.IsNullOrEmpty(Template.EnvironmentWeatherPreset)? briefingRoom.Translate("Random") : briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.WeatherPreset, Template.EnvironmentWeatherPreset).Value.Name.Get(briefingRoom.LanguageKey))
                           </div>
                           <div>
                                @briefingRoom.Translate("TimeOfDay"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.EnvironmentTimeOfDay)<br/>
                                @briefingRoom.Translate("Wind"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.EnvironmentWind)
                           </div>
                        </div> 
                        <b>@briefingRoom.Translate("Situation")</b>
                        <div class="generator-group flex-justify-spaced flex-margin-fix">
                           <div>
                               <b>@briefingRoom.Translate("Enemy")</b><br/>
                               @briefingRoom.Translate("AA"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationEnemyAirDefense)<br/>
                               @briefingRoom.Translate("CAP"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationEnemyAirForce)<br/>
                               @briefingRoom.Translate("Skill"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationEnemySkill)
                           </div>
                           <div>
                               <b>@briefingRoom.Translate("Friendly")</b><br/>
                                @briefingRoom.Translate("AA"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationFriendlyAirDefense)<br/>
                                @briefingRoom.Translate("CAP"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationFriendlyAirForce)<br/>
                                @briefingRoom.Translate("Skill"): @BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, Template.SituationFriendlySkill)
                           </div>
                        </div>
                        <br/>
                        @if(Template.OptionsMission.Count > 0)
                        {
                            <span><b>@briefingRoom.Translate("Options"):</b>&nbsp;@string.Join(", ",Template.OptionsMission.Select(x => briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.OptionsMission, x).Value.Name.Get(briefingRoom.LanguageKey)))</span><br/>
                        }
                        @if(Template.OptionsRealism.Count > 0)
                        {
                            <span><b>@briefingRoom.Translate("Realism")</b>:&nbsp;@string.Join(", ",Template.OptionsRealism.Select(x => BriefingRoomGUITools.GetEnumName(briefingRoom.LanguageKey, x)))</span><br/>
                        }
                        @if(Template.Mods.Count > 0)
                        {
                        <span><b>@briefingRoom.Translate("Mods"):</b>&nbsp;@string.Join(", ",Template.Mods.Select(x => briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.DCSMod, x).Value.Name.Get(briefingRoom.LanguageKey))))</span>
                        }
                        @if(Template.OptionsUnitBanList.Count > 0)
                        {
                        <span><b>@briefingRoom.Translate("UnitBanList"):</b>&nbsp;@string.Join(", ",Template.OptionsUnitBanList.Select(x => briefingRoom.GetSingleDatabaseEntryInfo(DatabaseEntryType.Unit, x).Value.Name.Get(briefingRoom.LanguageKey)))</span>
                        }
                    </p> 
                </div>
            </div>
        </EditForm>
        <div class=bottom-bar>
            <LoggerAll logs="MainLayout.logs" />
        </div>
    </div>
    }
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="MainLayout.logs" />
            <ButtonTrio PrimaryFunc="DownloadMission" PrimaryLabel=@briefingRoom.Translate("Mission") PrimaryIcon="data-transfer-download"
            SecondaryFunc="DownloadBriefing" SecondaryLabel=@briefingRoom.Translate("Briefing") SecondaryIcon="browser"
            TertiaryFunc="ClearMission" TertiaryLabel="" TertiaryIcon="x" />
            @if(!showGenerator){
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = true"><span class="oi oi-fullscreen-exit"></span></button>
                <button class="btn btn-primary form-control"  @onclick="() => GenerateMissionAsync()">@briefingRoom.Translate("Generate")</button>
            }
            else {
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = false"><span class="oi oi-fullscreen-enter"></span></button>
            }
            <Briefing mission=@mission />
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;
    private string tempateMessage;
    private bool showGenerator = true;
    private static readonly string DEFAULT_TEMPLATE_FILEPATH = $"{BriefingRoom.GetBriefingRoomRootPath()}Default.brt";
    private TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
    private bool spinner = false;
    private FlightGroupUtils flightGroupUtil = new FlightGroupUtils();
    private ObjectiveUtils objectiveUtil = new ObjectiveUtils(true);
    private BuilderUtils builderUtils {get; set;}

    protected override void OnInitialized()
    {
        builderUtils = new BuilderUtils(briefingRoom);
        Template = new MissionTemplate();
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
        objectiveUtil.Tab = Template.Objectives[0];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) {
            await localStorage.SetItemAsync("DCSQuickEditorTemplate", Template.GetIniBytes());
        } else {
             try
            {
                var autoLoadPreviousState = await localStorage.GetItemAsync<bool>("DCSAutoLoadPreviousState");
                if(!autoLoadPreviousState) return;
                var templateBytes = await localStorage.GetItemAsync<byte[]>("DCSQuickEditorTemplate");
                if(templateBytes == null)
                {
                    throw new Exception("Template is null");
                }
                Template.LoadFromString(Encoding.Default.GetString(templateBytes));
                tempateMessage = "Loaded Previous Template State";
                clearTemplateMessageDelay();
                StateHasChanged();
            }
            catch (System.Exception)
            {
                Template = new MissionTemplate();
            }
            flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
            objectiveUtil.Tab = Template.Objectives[0];
        }
    }

   
    private async void clearTemplateMessageDelay()
    {
        await Task.Delay(1000);
        tempateMessage = "";
        StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            var targetFile = e.File.OpenReadStream(BriefingRoom.MAXFILESIZE);
            var data = "";
            if(e.File.Name.EndsWith(".miz"))
            {
                using var ms = new MemoryStream();
                await targetFile.CopyToAsync(ms);
                using var zip = new ZipArchive(ms);
                if (!zip.Entries.Any(entry => entry.Name == "template.brt"))
                    throw new Exception("Template File not found within mission");
                targetFile.Close();
                using var reader = new StreamReader(zip.Entries.First(entry => entry.Name == "template.brt").Open());
                data = await reader.ReadToEndAsync();
            } else {
                using var reader = new StreamReader(targetFile);
                data = await reader.ReadToEndAsync();
            }
            Template.LoadFromString(data);
            Template.BriefingMissionName = "";
            Template.BriefingMissionDescription = "";
            tempateMessage = "Template Loaded";
            clearTemplateMessageDelay();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = $"Failed to Load Template (Template may no longer be compatable): {ex.Message}";
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        tempateMessage = "Template Saved";
        clearTemplateMessageDelay();
    }

    private Task ClearTemplate()
    {
        tempateMessage = "Template Reset";
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void GenerateMissionAsync()
    {
        try {
            await ClearLateDownload();
            spinner = true;
            StateHasChanged();
            mission = null;
            errorMessage = "";
            await Task.Run(() => {
                mission = briefingRoom.GenerateMission(Template);
            });
            StateHasChanged();
            await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", mission.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
        } finally{
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearMission()
    {
        mission = null;
        showGenerator = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        try {
            spinner = true;
            StateHasChanged();
            await Task.Run(async () => {
                Stopwatch stopwatch = Stopwatch.StartNew(); 
                byte[] zipBytes = await mission.SaveToMizBytes();
                if (zipBytes == null) return; // Something went wrong during the .miz export
                stopwatch.Stop();
                Console.WriteLine($"Download Prep in {stopwatch.Elapsed.Seconds}s");
                if(stopwatch.Elapsed.Seconds > 5)
                {
                    ShowLateDownloadButton( $"{(Template.OptionsMission.Contains("DSMC")? "DSMC_": "")}{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes);
                return;  
                } 
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{(Template.OptionsMission.Contains("DSMC")? "DSMC_": "")}{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes);
            });
        } catch (Exception ex){
            Console.WriteLine(ex);
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }


    private byte[] cachedBytes;
     private string cachedName;
     private string cachedMimeType;
     private Boolean showLateDownloadButton = false;

    private void ShowLateDownloadButton(string fileName, string mimeType, byte[] data)
    {
        cachedBytes = data;
        cachedName = fileName;
        cachedMimeType = mimeType;
        showLateDownloadButton = true;
    }

    private async Task LateDownload()
    {
        try {
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", cachedName, cachedMimeType, cachedBytes);

        } catch (Exception ex) { 
            Console.WriteLine(ex);
        } finally {
            await ClearLateDownload();
        }
    }

    
    private Task ClearLateDownload()
    {
        showLateDownloadButton = false;
        cachedBytes = null;
        cachedName = null;
        cachedMimeType = null;
        return Task.CompletedTask;
    }


    async Task DownloadBriefing()
    {
        byte[] zipBytes = Encoding.ASCII.GetBytes(mission.Briefing.GetBriefingAsHTML(mission));
        if (zipBytes == null) return; // Something went wrong during the .miz export

        try
        {
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html",
            "text/html", zipBytes);
        }
        catch (Exception) { }
    }

    private void ClearStrikePackages()
    {
        Template.AircraftPackages = new List<MissionTemplatePackage>();
    }

    private void ClearCarrierHint(string key)
    {
        Template.CarrierHints.Remove(key);
    }
}