@page "/CampaignBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BriefingRoom4DCS.BriefingRoom briefingRoom
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.GUI.Common.Shared.Sections
@using BriefingRoom4DCS.GUI.Common.Shared.Tabs
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
@using Polly
@using System.IO.Compression
@using System.Diagnostics

<LoadingSpinner ON="spinner"/>
<LateDownloadButton Download="LateDownload" ON="showLateDownloadButton" />  
<div class="title-bar">
    <h1>@briefingRoom.Translate("CampaignGenerator")</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".cbrt,.zip" />
</div>
<div class="generator-group">
    @if(showGenerator) {
    <div class="generator-form">
        <AlertMessages TemplateMessage="@templateMessage" ErrorMessage="@errorMessage" />
        <EditForm Model="Template" OnSubmit="GenerateCampaign">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <button class="btn btn-primary form-control" type="submit">@briefingRoom.Translate("Generate")</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value.Key ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value.Key)'>@string.Join(" & ", value.Value.Select(x => briefingRoom.Translate(x)))</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context-&-enviroment":
                   <ContextAndEnvTab Template="Template" builderUtils="builderUtils"/>
                    break;
                case "missions":
                    <CampaignMissionsTab Template="Template" />
                    break;
                case "options":
                    <div id="options" class="generator-block">
                        <h3>@briefingRoom.Translate("Options")</h3>
                        <InputEnum Label="Fog of war" @bind-Value="Template.OptionsFogOfWar" EnumType="FogOfWar"/>
                        <MissionOptions Template="Template" />
                    </div>
                    break;
                case "situation":
                   <SituationTab Template="Template"/>
                   <CombinedArmsTab Template="Template"/>
                    break;
                case "flight-groups":
                   <FlightGroupsTab Template="Template" builderUtils="builderUtils" flightGroupUtil="flightGroupUtil"/>
                    break;
                    case "unitBanlist":
                   <UnitBanTab Template="Template" />
                    break;
            }
        </EditForm>
        <div class=bottom-bar>
            <LoggerAll logs="MainLayout.logs"/>
        </div>
    </div>
    }
    @if (campaign != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="MainLayout.logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadCampaign"  PrimaryLabel=@briefingRoom.Translate("Campaign") PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel=@briefingRoom.Translate("Briefings") SecondaryIcon="browser"
              TertiaryFunc="ClearCampaign"  TertiaryLabel="" TertiaryIcon="x"
            />
             @if(!showGenerator){
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = true"><span class="oi oi-fullscreen-exit"></span></button>
                <button class="btn btn-primary form-control"  @onclick="() => GenerateCampaign()">@briefingRoom.Translate("Generate")</button>
            }
            else {
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = false"><span class="oi oi-fullscreen-enter"></span></button>
            }
            <h3>@campaign.Name (@campaign.MissionCount)</h3>
            <ul class="nav nav-tabs">
                @foreach (var mission in campaign.Missions)
                {
                    <li class="nav-item">
                        <a class="nav-link @(missionTab == mission ? "active" : "")" aria-current="page"
                            @onclick='() => SetMissionTab(mission)'>@(campaign.Missions.IndexOf(mission) + 1)</a>
                    </li>
                }
            </ul>
            <Briefing mission=@missionTab />
        </div>
    }
</div>


@code {
    private CampaignTemplate Template;
    private DCSCampaign campaign;
    private string errorMessage;

    private string templateMessage;

    private bool showGenerator = true;


    private bool spinner = false;

    private BuilderUtils builderUtils {get; set;}
    private FlightGroupUtils flightGroupUtil = new FlightGroupUtils();

    protected override void OnInitialized()
    {
        builderUtils = new BuilderUtils(briefingRoom);
        Template = new CampaignTemplate();
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) {
            await localStorage.SetItemAsync("DCSCampaignEditorTemplate", Template.GetIniBytes());
        } else {
             try
            {
                var autoLoadPreviousState = await localStorage.GetItemAsync<bool>("DCSAutoLoadPreviousState");
                if(!autoLoadPreviousState) return;
                var templateBytes = await localStorage.GetItemAsync<byte[]>("DCSCampaignEditorTemplate");
                if(templateBytes == null)
                {
                    throw new Exception("Template is null");
                }
                Template.LoadFromString(Encoding.Default.GetString(templateBytes));
                templateMessage = "Loaded Previous Template State";
                clearTemplateMessageDelay();
                StateHasChanged();
            }
            catch (System.Exception)
            {
                Template = new CampaignTemplate();
            }
            flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
        }
    }

 
    private async void clearTemplateMessageDelay()
    {
        await Task.Delay(1000);
        templateMessage = "";
        StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            var targetFile = e.File.OpenReadStream(BriefingRoom.MAXFILESIZE);
            var data = "";
            if(e.File.Name.EndsWith(".zip"))
            {
                using var ms = new MemoryStream();
                await targetFile.CopyToAsync(ms);
                using var zip = new ZipArchive(ms);
                if (!zip.Entries.Any(entry => entry.Name == "template.cbrt"))
                    throw new Exception("Template File not found within campaign");
                targetFile.Close();
                using var reader = new StreamReader(zip.Entries.First(entry => entry.Name == "template.cbrt").Open());
                data = await reader.ReadToEndAsync();
            } else {
                using var reader = new StreamReader(targetFile);
                data = await reader.ReadToEndAsync();
            }
            Template.LoadFromString(data); 
            templateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = $"Failed to Load Template (Template may no longer be compatable): {ex.Message}";
        }
    }

    private async Task SaveTemplate()
    {
        var fileBytes = Template.GetIniBytes();
        try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.cbrt", "application/octet-stream", fileBytes); }
        catch (Exception) { }
        templateMessage = "Template Saved"; 
        clearTemplateMessageDelay();
    }

    private Task ClearTemplate()
    {
        templateMessage = "Template Reset"; 
        Template.Clear();
        clearTemplateMessageDelay();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void GenerateCampaign()
    {
        try {
            await ClearLateDownload();
            spinner = true;
            StateHasChanged();
            campaign = null;
            errorMessage = "";
            await Task.Run(() => {
                campaign = briefingRoom.GenerateCampaign(Template);
            });
            missionTab = campaign.Missions.First();
            StateHasChanged();
            await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", missionTab.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
            if(ex.InnerException != null)
                errorMessage += " " + ex.InnerException.Message;
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearCampaign()
    {
        campaign = null;
        showGenerator = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadCampaign()
    {
        try {
            spinner = true;
            StateHasChanged();
            await Task.Run(async () => {
                Stopwatch stopwatch = Stopwatch.StartNew(); 
                byte[] zipBytes = await campaign.ExportToCompressedByteArray(Template);
                if (zipBytes == null) return; // Something went wrong during the .miz export
                stopwatch.Stop();
                Console.WriteLine($"Download Prep in {stopwatch.Elapsed.Seconds}s");
                if(stopwatch.Elapsed.Seconds > 5)
                {
                    ShowLateDownloadButton($"{Template.ContextTheater} - {campaign.Name}.zip", "application/octet-stream", zipBytes);
                return;  
                } 
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {campaign.Name}.zip", "application/octet-stream", zipBytes);
            });
        } catch (Exception ex){
            Console.WriteLine(ex);
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

     private byte[] cachedBytes;
     private string cachedName;
     private string cachedMimeType;
     private Boolean showLateDownloadButton = false;

    private void ShowLateDownloadButton(string fileName, string mimeType, byte[] data)
    {
        cachedBytes = data;
        cachedName = fileName;
        cachedMimeType = mimeType;
        showLateDownloadButton = true;
    }

    private async Task LateDownload()
    {
        try {
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", cachedName, cachedMimeType, cachedBytes);

        } catch (Exception ex) { 
            Console.WriteLine(ex);
        } finally {
            await ClearLateDownload();
        }
    }

        private Task ClearLateDownload()
    {
        showLateDownloadButton = false;
        cachedBytes = null;
        cachedName = null;
        cachedMimeType = null;
        return Task.CompletedTask;
    }

    async Task DownloadBriefing()
    {
            byte[] zipBytes = campaign.ExportBriefingsToCompressedByteArray();
            if (zipBytes == null) return; // Something went wrong during the .miz export

            try { await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {campaign.Name} - Briefings.zip", "text/html", zipBytes); }
            catch (Exception) { }
    }

    private string tab = "context-&-enviroment";
    private Dictionary<string, string[]> tabs = new Dictionary<string, string[]>{
        { "context-&-enviroment", ["ContextAndEnviroment"] },
        { "flight-groups", ["FlightGroups"] },
        { "missions", ["Missions"] },
        { "situation", ["Situation", "CombinedArms"] },
        { "options", ["Options"] },
        { "unitBanlist", ["UnitBanList"] }
    };
    private void SetTab(string var)
    {
        tab = var;
    }

    private DCSMission missionTab;
    private void SetMissionTab(DCSMission var)
    {
        missionTab = var;
        Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", missionTab.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
    }
}