@page "/FullBuilder"
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BriefingRoom4DCS.BriefingRoom briefingRoom
@using BriefingRoom4DCS
@using BriefingRoom4DCS.Data
@using BriefingRoom4DCS.GUI.Common.Shared.Sections
@using BriefingRoom4DCS.Template
@using BriefingRoom4DCS.Generator
@using BriefingRoom4DCS.Mission
@using System.Globalization
@using System.Linq
@using Blazored.Typeahead
@using BriefingRoom4DCS.GUI.Utils
@using System.Text
@using System.IO
@using Polly
@using System.IO.Compression
@using System.Diagnostics
@using BriefingRoom4DCS.GUI.Common.Shared.Tabs


<LoadingSpinner ON="spinner"/>
<LateDownloadButton Download="LateDownload" ON="showLateDownloadButton" />  
<div class="title-bar">
    <h1>@briefingRoom.Translate("FullGenerator")</h1>
    <TemplateButtons LoadTemplate="LoadTemplate" SaveTemplate="SaveTemplate" ClearTemplate="ClearTemplate" AcceptString=".brt,.miz" />
</div>
<div class="generator-group">
    @if(showGenerator) {
    <div class="generator-form">
        <AlertMessages templateMessage="@templateMessage" errorMessage="@errorMessage" />
        <EditForm Model="Template" OnSubmit="GenerateMissionAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <button class="btn btn-primary form-control" type="submit">@briefingRoom.Translate("Generate")</button>
            <hr>
            <ul class="nav nav-tabs">
                @foreach (var value in tabs)
                {
                    <li class="nav-item">
                        <a class="nav-link @(tab == value.Key ? "active" : "")" aria-current="page"
                        @onclick='() => SetTab(value.Key)'>@briefingRoom.Translate(value.Value)</a>
                    </li>
                }
            </ul>
            @switch (tab)
            {
                case "context-&-enviroment":
                    <ContextAndEnvTab builderUtils="@builderUtils" Template="@Template" />
                    break;
                case "objectives":
                    <ObjectivesTab objectiveUtil="@objectiveUtil" builderUtils="@builderUtils" Template="@Template" RenderHintMap="@RenderHintMap" />
                    break;
                case "options":
                    <OptionsTab builderUtils="@builderUtils" Template="@Template" />
                    break;
                case "briefing":
                    <BriefingTab Template="@Template" />
                    break;
                case "situation":
                    <SituationTab Template="@Template" />
                    break;
                case "combined-arms":
                    <CombinedArmsTab Template="@Template" />
                    break;
                case "flight-groups":
                    <FlightGroupsTab builderUtils="@builderUtils" flightGroupUtil="@flightGroupUtil" Template="@Template" RenderHintMap="@RenderHintMap" />
                    break;
                    case "unitBanlist":
                    <UnitBanTab Template="@Template" />
                    break;
            }
        </EditForm>
        <button id="hint-open-map-button" class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom" @onclick='() => RenderHintMap("")'><span class="oi oi-globe"></span> @briefingRoom.Translate("ViewLocationHint")</button>
        <div class="offcanvas offcanvas-bottom h-auto" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasBottomLabel">@briefingRoom.Translate("LocationHint")</h5>
                <button id="hint-close-map-button" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
                <div class="offcanvas-body">
                    <p>@briefingRoom.Translate("HintUsageP1")&nbsp;<span class="oi oi-globe"></span>&nbsp;@briefingRoom.Translate("HintUsageP2")</p>
                    <p class="custom-warning"><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("HintNote")</p>
                    <button class="btn btn-warning float-right" aria-hidden="true" @onclick='async() => await JSRuntime.InvokeVoidAsync("RemoveAllHintMarkers")'>
                        <span class="oi oi-reload"></span>
                        <span class="template-box-button-text">@briefingRoom.Translate("Reset")</span>
                    </button>
                    <div id="hintMap"></div>
                </div>
            </div>
        <div class=bottom-bar>
            <LoggerAll logs="MainLayout.logs"/>
        </div>
    </div>
    }
    @if (mission != null)
    {
        <div class="generator-preview">
            <LoggerWarn logs="MainLayout.logs"/>
            <ButtonTrio
              PrimaryFunc="DownloadMission"  PrimaryLabel=@briefingRoom.Translate("Mission") PrimaryIcon="data-transfer-download"
              SecondaryFunc="DownloadBriefing"  SecondaryLabel=@briefingRoom.Translate("Briefing") SecondaryIcon="browser"
              TertiaryFunc="ClearMission"  TertiaryLabel="" TertiaryIcon="x"
            />
            @if(!showGenerator){
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = true"><span class="oi oi-fullscreen-exit"></span></button>
                <button class="btn btn-primary form-control"  @onclick="() => GenerateMissionAsync()">@briefingRoom.Translate("Generate")</button>
            }
            else {
                <button class="btn btn-secondary float-right"  @onclick="() => showGenerator = false"><span class="oi oi-fullscreen-enter"></span></button>
            }

            <Briefing mission=@mission />
        </div>
    }
</div>


@code {
    private MissionTemplate Template;
    private DCSMission mission;
    private string errorMessage;

    private string templateMessage;

    private bool showGenerator = true;

    private bool spinner = false;

    private FlightGroupUtils flightGroupUtil = new FlightGroupUtils();
    private ObjectiveUtils objectiveUtil = new ObjectiveUtils(false);
    private BuilderUtils builderUtils {get; set;}

    protected override void OnInitialized()
    {
        builderUtils = new BuilderUtils(briefingRoom);
        Template = new MissionTemplate();
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
        objectiveUtil.Tab = Template.Objectives[0];  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) {
            await localStorage.SetItemAsync("DCSFullEditorTemplate", Template.GetIniBytes());
        } else {
             try
            {
                var autoLoadPreviousState = await localStorage.GetItemAsync<bool>("DCSAutoLoadPreviousState");
                if(!autoLoadPreviousState) return;
                var templateBytes = await localStorage.GetItemAsync<byte[]>("DCSFullEditorTemplate");
                if(templateBytes == null)
                {
                    throw new Exception("Template is null");
                }
                Template.LoadFromString(Encoding.Default.GetString(templateBytes));
                templateMessage = "Loaded Previous Template State";
                clearTemplateMessageDelay();
                StateHasChanged();
            }
            catch (System.Exception)
            {
                Template = new MissionTemplate();
                Template.Objectives[0].Preset = "Custom";
            }
            flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
            objectiveUtil.Tab = Template.Objectives[0];
        }
    }

    private async void clearTemplateMessageDelay()
    {
        await Task.Delay(1000);
        templateMessage = "";
        StateHasChanged();
    }

    private async Task LoadTemplate(InputFileChangeEventArgs e)
    {
        try
        {
            Template = await BuilderUtils.LoadTemplateFile(e, Template);
            await JSRuntime.InvokeVoidAsync("SetHintPositions", BuilderUtils.LoadHints(ref Template), Template.ContextTheater);
            templateMessage = "Template Loaded";
            clearTemplateMessageDelay();
            flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
            objectiveUtil.Tab = Template.Objectives[0];  
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = $"Failed to Load Template (Template may no longer be compatable): {ex.Message}";
        }
    }

    private async Task SaveTemplate()
    {
        try {
            await AddPositionHints();
            var fileBytes = Template.GetIniBytes();
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"Default.brt", "application/octet-stream", fileBytes);
            templateMessage = "Template Saved"; 
            clearTemplateMessageDelay();
        } catch (Exception ex) {
             Console.WriteLine(ex);
        }
    }

    private async Task ClearTemplate()
    {
        templateMessage = "Template Reset"; 
        Template.Clear();
        Template.Objectives[0].Preset = "Custom";
        await JSRuntime.InvokeVoidAsync("SetHintPositions", new Dictionary<string, double[]>(),  Template.ContextTheater);
        clearTemplateMessageDelay();
        objectiveUtil.Tab = Template.Objectives[0];  
        flightGroupUtil.Tab = Template.PlayerFlightGroups[0];
        StateHasChanged();
    }

    private async Task AddPositionHints()
    {
        var result = await JSRuntime.InvokeAsync<Dictionary<string, double[]>>("GetHintPoints", Template.ContextTheater);
        BuilderUtils.SetTemplateHints(result, ref Template);
    }

    private async void GenerateMissionAsync()
    {
        try {
            await ClearLateDownload();
            spinner = true;
            StateHasChanged();
            mission = null;
            errorMessage = "";
            await Task.Run(async () => {
                await AddPositionHints();
                mission = briefingRoom.GenerateMission(Template);
            });
            StateHasChanged();
            await Policy.Handle<Exception>().RetryAsync(3).ExecuteAsync(async () => await JSRuntime.InvokeVoidAsync("RenderMap", mission.GetMapData(), Template.ContextTheater, Template.ContextPlayerCoalition == Coalition.Red));
        } catch (Exception ex){
            Console.WriteLine(ex);
            errorMessage = ex.Message;
            if(ex.InnerException != null)
                errorMessage += " " + ex.InnerException.Message;
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private Task ClearMission()
    {
        mission = null;
        showGenerator = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DownloadMission()
    {
        try {
            spinner = true;
            StateHasChanged();
            await Task.Run(async () => {
                Stopwatch stopwatch = Stopwatch.StartNew(); 
                byte[] zipBytes = await mission.SaveToMizBytes();
                if (zipBytes == null) return; // Something went wrong during the .miz export
                stopwatch.Stop();
                Console.WriteLine($"Download Prep in {stopwatch.Elapsed.Seconds}s");
                if(stopwatch.Elapsed.Seconds > 5)
                {
                    ShowLateDownloadButton( $"{(Template.OptionsMission.Contains("DSMC")? "DSMC_": "")}{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes);
                    return;  
                } 
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{(Template.OptionsMission.Contains("DSMC")? "DSMC_": "")}{Template.ContextTheater} - {mission.Briefing.Name}.miz", "application/octet-stream", zipBytes);
                }
            );
            
        } catch (Exception ex){
            Console.WriteLine(ex);
        } finally {
            spinner = false;
            StateHasChanged();
        }
    }

    private byte[] cachedBytes;
     private string cachedName;
     private string cachedMimeType;
     private Boolean showLateDownloadButton = false;

    private void ShowLateDownloadButton(string fileName, string mimeType, byte[] data)
    {
        cachedBytes = data;
        cachedName = fileName;
        cachedMimeType = mimeType;
        showLateDownloadButton = true;
    }

    private async Task LateDownload()
    {
        try {
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", cachedName, cachedMimeType, cachedBytes);

        } catch (Exception ex) { 
            Console.WriteLine(ex);
        } finally {
            await ClearLateDownload();
        }
    }

    private Task ClearLateDownload()
    {
        showLateDownloadButton = false;
        cachedBytes = null;
        cachedName = null;
        cachedMimeType = null;
        return Task.CompletedTask;
    }


    async Task DownloadBriefing()
    {
        try { 
            byte[] zipBytes = Encoding.UTF8.GetBytes(mission.Briefing.GetBriefingAsHTML(mission));
            if (zipBytes == null) return; // Something went wrong during the .miz export
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", $"{Template.ContextTheater} - {mission.Briefing.Name}.html", "text/html", zipBytes); }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    private async Task RenderHintMap(string hintKey)
    {
        var supporingData = briefingRoom.GetMapSupportingMapData(Template);
        await JSRuntime.InvokeVoidAsync("RenderHintMap", Template.ContextTheater, hintKey, supporingData);
    }

    private string tab = "context-&-enviroment";
    private Dictionary<string, string> tabs = new Dictionary<string, string>{
        { "context-&-enviroment", "ContextAndEnviroment" },
        { "flight-groups", "FlightGroups" },
        { "objectives", "Objectives" },
        { "situation", "Situation" },
        { "combined-arms", "CombinedArms"},
        { "options", "Options" },
        { "unitBanlist", "UnitBanList"},
        { "briefing", "Briefing" },
    };
    private void SetTab(string var)
    {
        tab = var;
    }

  
}