@inherits LayoutComponentBase
@using BriefingRoom4DCS
@using BriefingRoom4DCS.GUI.Utils
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BriefingRoom4DCS.BriefingRoom briefingRoom
<CascadingValue Value="this">
    <div class="page @((darkmode ? "darkMode" : ""))">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                @if (!BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <VersionNote />
                     <div class="form-group language-selector @((saveState.HasValue ? (saveState.Value ? "save-path-success" : "save-path-error") : ""))">
                        <label><span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("SaveGameLocation")  
                        @if(saveState.HasValue)
                            {
                                @if (saveState.Value)
                                {
                                    <span class="oi oi-check"></span>
                                }
                                else
                                {
                                    <span class="oi oi-x"></span>
                                }
                            }</label>
                            <input class="form-control" type="text" @onchange="e => getDCSSaveGamePath((string)e.Value)" placeholder="@(string.IsNullOrEmpty(BriefingRoom.DCSSaveGamePath) ? "e.g: C:\\Users\\<USER>\\Saved Games\\DCS.openbeta" : BriefingRoom.DCSSaveGamePath)" />
                    </div>
                    <div>&nbsp;</div>
                }
                <div class="form-group language-selector">
                    <label>@briefingRoom.Translate("Language") <a href="https://poeditor.com/join/project/MJES2FW5lh"
                            class="img-link-tiny" target="_blank"><img src="_content/CommonGUI/img/poeditor.svg"
                                alt="poeditor.com" /></a></label>
                    <select class="form-control" value=@briefingRoom.LanguageKey
                        @onchange="eventArgs => SetLanguage((string)eventArgs.Value)">
                        @foreach (var key in BriefingRoom.AvailableLanguagesMap.Keys)
                        {
                            <option value="@key">@BriefingRoom.AvailableLanguagesMap[key]</option>
                        }
                    </select>
                </div>
                @if (BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <div>&nbsp;<span class="oi oi-info"></span>&nbsp;@briefingRoom.Translate("DockerWarn")&nbsp;</div>
                }
                <a href="@BriefingRoom.WEBSITE_URL" target="_blank">@briefingRoom.Translate("About")</a>
                <a href="@BriefingRoom.DISCORD_URL" target="_blank" class="img-link"><img alt="Discord"
                        src="_content/CommonGUI/img/discord-icon-svgrepo-com.svg"></a>
                <a href="@BriefingRoom.REPO_URL" target="_blank" class="img-link"><img alt="Github"
                        src="_content/CommonGUI/img/github-mark@((darkmode ? "-white" : "")).svg"></a>
                <a href="https://www.patreon.com/bePatron?u=99514930" target="_blank" class="img-link"><img
                        alt="Become a Patron!" src="_content/CommonGUI/img/patreon-icon.png"></a>
                @if (BriefingRoom.RUNNING_IN_DOCKER)
                {
                    <div class="btn-container"><a title="Support me on ko-fi.com" class="kofi-button"
                            style="background-color:#29abe0;" href="https://ko-fi.com/V7V0IZI9N" target="_blank"> <span
                                class="kofitext"><img src="https://storage.ko-fi.com/cdn/cup-border.png"
                                    alt="Ko-fi donations"
                                    class="kofiimg">@briefingRoom.Translate("KoFiContributeBeg")</span></a></div>
                }
                else
                {
                    <a href="https://ko-fi.com/V7V0IZI9N" target="_blank" class="img-link"><img alt="Support us with Ko-fi"
                            src="_content/CommonGUI/img/Kofi-icon.png"></a>
                }
                <label class="bulb">
                    <input type="checkbox" checked=@darkmode
                        @onchange="eventArgs => SetDarkMode((bool)eventArgs.Value)" />
                    <span class="oi oi-@((darkmode ? "sun" : "moon"))"></span>
                </label>
                <label class="bulb" style="margin-bottom: 3px">
                    <input type="checkbox" checked=@autoLoadPreviousState
                        @onchange="eventArgs => SetAutoLoadPreviousState((bool)eventArgs.Value)" />
                    <span class="oi oi-aperture" style="color: @((autoLoadPreviousState ? "inherit" : "gray"));"></span>
                </label>
            </div>

            <div class="content px-4">
                @if(briefingRoom.Translate("ReloadDatabase").StartsWith("ERR_Missing_Translation_key"))
                {
                    <div class="alert alert-danger" role="alert">
                        Database seems to be corrupted or missing translations.
                        <button class="btn btn-secondary" @onclick="ReloadDatabase">Fix Database!</button>
                    </div>
                }
                @Body
            </div>
        </div>
    </div>
</CascadingValue>


@code {
    public bool darkmode = false;
    public bool autoLoadPreviousState = false;

    public bool? saveState = null;

    public GitHubRelease MainRelease = null;
    public GitHubRelease BetaRelease = null;

    public static List<Tuple<DateTime, LogMessageErrorLevel, string>> logs = new List<Tuple<DateTime, LogMessageErrorLevel,
    string>>();

    public static void WriteToDebugLog(string message, LogMessageErrorLevel errorLevel = LogMessageErrorLevel.Info)
    {
        logs.Add(new(DateTime.Now, errorLevel, message));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            darkmode = true;
            briefingRoom.LanguageKey = "en";
            try
            {
                darkmode = await localStorage.GetItemAsync<bool>("DCSUseDarkMode");
                autoLoadPreviousState = await localStorage.GetItemAsync<bool>("DCSAutoLoadPreviousState");
                briefingRoom.LanguageKey = await localStorage.GetItemAsync<string>("DCSLanguage");
                var path = await localStorage.GetItemAsync<string>("DCSSaveGamePath");
                if(path != null)
                {
                    getDCSSaveGamePath(path);
                }
                if (string.IsNullOrEmpty(briefingRoom.LanguageKey))
                    briefingRoom.LanguageKey = "en";
            }
            catch (System.Exception)
            {
            }
            briefingRoom.SetLogHandler(WriteToDebugLog);
            try
            {
                MainRelease = await JSRuntime.InvokeAsync<GitHubRelease>("GetMainRelease");
                BetaRelease = await JSRuntime.InvokeAsync<GitHubRelease>("GetBetaRelease");
            }
            catch (System.Exception)
            {
            }
            StateHasChanged();
        }
    }


    private async Task SetDarkMode(bool darkModeOn)
    {
        darkmode = darkModeOn;
        StateHasChanged();
        try
        {
            await localStorage.SetItemAsync("DCSUseDarkMode", darkModeOn);
        }
        catch (System.Exception)
        {
        }
    }

    private async Task SetAutoLoadPreviousState(bool state)
    {
        autoLoadPreviousState = state;
        StateHasChanged();
        try
        {
            await localStorage.SetItemAsync("DCSAutoLoadPreviousState", autoLoadPreviousState);
        }
        catch (System.Exception)
        {
        }
    }

    private async Task SetLanguage(string langKey)
    {
        briefingRoom.LanguageKey = langKey;
        try
        {
            await localStorage.SetItemAsync("DCSLanguage", langKey);
        }
        catch (System.Exception)
        {
        }
        StateHasChanged();
    }

    public void getDCSSaveGamePath(string path)
    {
        saveState = briefingRoom.SetDCSSaveGamePath(path);
        if(saveState.HasValue && saveState.Value)
        {
            try
            {
                localStorage.SetItemAsync("DCSSaveGamePath", path);
            }
            catch (System.Exception)
            {
                // Ignore errors, we will try again next time.
            }
        }
        StateHasChanged();
    }

    public void ReloadDatabase()
    {
        BriefingRoom.ReloadDatabase();
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }
}
