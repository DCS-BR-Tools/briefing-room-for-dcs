@inject BriefingRoom4DCS.BriefingRoom briefingRoom

@if (GetLastRunLogs().Count(LogsIfAboveWarn) > 0)
{
    @if (showLogs)
    {
        <div class="alert alert-warning" role="warning">
            <div>
                <div class="btn-group" role="group">
                    <button class="btn btn-warning" @onclick="() => ToggleShowLogs()"><span
                            class="oi oi-warning"></span>@GetLastRunLogs().Count(LogsIfAboveWarn)</button>
                    <button class="btn btn-warning" @onclick="() => ClearLogs()"><span
                            class="oi oi-reload"></span>@briefingRoom.Translate("Clear")</button>
                    <p><span class="oi oi-info"></span>&nbsp; @briefingRoom.Translate("WarningNote")</p>
                </div>
                @foreach (var log in GetLastRunLogs().Where(LogsIfAboveWarn).ToList())
                {
                    <p>@log.Item3</p>
                }
            </div>
        </div>
    }
    else
    {
        <button class="btn btn-warning" @onclick="() => ToggleShowLogs()"><span
                class="oi oi-warning"></span>@GetLastRunLogs().Count(LogsIfAboveWarn) </button>
    }
}

@code {
    [Parameter] public List<Tuple<DateTime, LogMessageErrorLevel, string>> logs { get; set; }
    private bool showLogs = false;

    public void ClearLogs()
    {
        logs.Clear();
        showLogs = false;
        StateHasChanged();
    }

    private void ToggleShowLogs()
    {
        showLogs = !showLogs;
    }

    private bool LogsIfAboveWarn(Tuple<DateTime, LogMessageErrorLevel, string> x) =>
    x.Item2 == LogMessageErrorLevel.Warning || x.Item2 == LogMessageErrorLevel.Error;

    private List<Tuple<DateTime, LogMessageErrorLevel, string>> GetLastRunLogs() =>
    logs.Count() == 0 ? [] : logs.Skip(logs.LastIndexOf(logs.Last(x => x.Item3 == "Generating mission date and time..."))).ToList();
}