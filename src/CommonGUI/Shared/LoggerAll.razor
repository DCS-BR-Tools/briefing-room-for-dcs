@inject IJSRuntime JSRuntime
@inject BriefingRoom4DCS.BriefingRoom briefingRoom
@if (showLogs)
{
    <div class="alert alert-secondary" role="info">
        <div>
            <div class="btn-group" role="group">
                <button class="btn btn-secondary" @onclick="() => ToggleShowLogs()"><span
                        class="oi oi-bug"></span>@logs.Count()</button>
                <button class="btn btn-secondary" @onclick="() => ClearLogs()"><span
                        class="oi oi-reload"></span>@briefingRoom.Translate("Clear")</button>
                <button class="btn btn-secondary" @onclick="() => CopyLogs()">
                    <span class="oi oi-clipboard"></span>@briefingRoom.Translate("Copy")</button>
                <button class="btn btn-secondary" @onclick="() => ReloadDatabase()">
                    <span class="oi oi-reload"></span>@briefingRoom.Translate("ReloadDatabase")</button>
            </div>
            <p class="logs-list">
                @foreach (var log in ReverseLogs())
                {
                    var logClass = log.Item2 == LogMessageErrorLevel.Error ? "text-danger" : log.Item2 == LogMessageErrorLevel.Warning ? "text-warning" : "";
                    <span class=@logClass >@log.Item2 - @log.Item1.ToString("hh:mm:ss.fff"): @log.Item3<br /></span>
                }
            </p>
        </div>
    </div>
}
else
{
    <button class="btn btn-secondary btn-sm" @onclick="() => ToggleShowLogs()"><span class="oi oi-bug"></span></button>
}

@code {
    [Parameter] public List<Tuple<DateTime, LogMessageErrorLevel, string>> logs { get; set; }
    private bool showLogs = false;

    public void ClearLogs()
    {
        logs.Clear();
        showLogs = false;
        StateHasChanged();
    }

    private void ToggleShowLogs()
    {
        showLogs = !showLogs;
    }

    private void CopyLogs()
    {
        JSRuntime.InvokeVoidAsync("CopyLogs", logs.Select(x => $"{x.Item1}: {x.Item2}").ToList());
    }

    private void ReloadDatabase()
    {
        BriefingRoom.ReloadDatabase();
    }

    private List<Tuple<DateTime, LogMessageErrorLevel, string>> ReverseLogs()
    {
        var logsDupe = logs.ToList();
        logsDupe.Reverse();
        return logsDupe;
    }
}